!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.StrapiFormBuilder=t():e.StrapiFormBuilder=t()}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=35)}([function(e,t,r){"use strict";var n=r(3),o=r(14),i=Object.prototype.toString;function s(e){return"[object Array]"===i.call(e)}function a(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===i.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return a(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:u,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)u(arguments[n],r);return t},extend:function(e,t,r){return u(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";(function(t){var n=r(0),o=r(17),i={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t)&&(a=r(4)),a),transformRequest:[function(e,t){return o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){c.headers[e]=n.merge(i)})),e.exports=c}).call(this,r(16))},function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty,o=Array.isArray,i=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),s=function(e,t){for(var r=t&&t.plainObjects?Object.create(null):{},n=0;n<e.length;++n)void 0!==e[n]&&(r[n]=e[n]);return r};e.exports={arrayToObject:s,assign:function(e,t){return Object.keys(t).reduce((function(e,r){return e[r]=t[r],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],r=[],n=0;n<t.length;++n)for(var i=t[n],s=i.obj[i.prop],a=Object.keys(s),c=0;c<a.length;++c){var u=a[c],f=s[u];"object"==typeof f&&null!==f&&-1===r.indexOf(f)&&(t.push({obj:s,prop:u}),r.push(f))}return function(e){for(;e.length>1;){var t=e.pop(),r=t.obj[t.prop];if(o(r)){for(var n=[],i=0;i<r.length;++i)void 0!==r[i]&&n.push(r[i]);t.obj[t.prop]=n}}}(t),e},decode:function(e,t,r){var n=e.replace(/\+/g," ");if("iso-8859-1"===r)return n.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(n)}catch(e){return n}},encode:function(e,t,r){if(0===e.length)return e;var n=e;if("symbol"==typeof e?n=Symbol.prototype.toString.call(e):"string"!=typeof e&&(n=String(e)),"iso-8859-1"===r)return escape(n).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var o="",s=0;s<n.length;++s){var a=n.charCodeAt(s);45===a||46===a||95===a||126===a||a>=48&&a<=57||a>=65&&a<=90||a>=97&&a<=122?o+=n.charAt(s):a<128?o+=i[a]:a<2048?o+=i[192|a>>6]+i[128|63&a]:a<55296||a>=57344?o+=i[224|a>>12]+i[128|a>>6&63]+i[128|63&a]:(s+=1,a=65536+((1023&a)<<10|1023&n.charCodeAt(s)),o+=i[240|a>>18]+i[128|a>>12&63]+i[128|a>>6&63]+i[128|63&a])}return o},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(o(e)){for(var r=[],n=0;n<e.length;n+=1)r.push(t(e[n]));return r}return t(e)},merge:function e(t,r,i){if(!r)return t;if("object"!=typeof r){if(o(t))t.push(r);else{if(!t||"object"!=typeof t)return[t,r];(i&&(i.plainObjects||i.allowPrototypes)||!n.call(Object.prototype,r))&&(t[r]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(r);var a=t;return o(t)&&!o(r)&&(a=s(t,i)),o(t)&&o(r)?(r.forEach((function(r,o){if(n.call(t,o)){var s=t[o];s&&"object"==typeof s&&r&&"object"==typeof r?t[o]=e(s,r,i):t.push(r)}else t[o]=r})),t):Object.keys(r).reduce((function(t,o){var s=r[o];return n.call(t,o)?t[o]=e(t[o],s,i):t[o]=s,t}),a)}}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(0),o=r(18),i=r(20),s=r(21),a=r(22),c=r(5);e.exports=function(e){return new Promise((function(t,u){var f=e.data,l=e.headers;n.isFormData(f)&&delete l["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",h=e.auth.password||"";l.Authorization="Basic "+btoa(d+":"+h)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?s(p.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,u,n),p=null}},p.onerror=function(){u(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){u(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var y=r(23),m=(e.withCredentials||a(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;m&&(l[e.xsrfHeaderName]=m)}if("setRequestHeader"in p&&n.forEach(l,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete l[t]:p.setRequestHeader(t,e)})),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),u(e),p=null)})),void 0===f&&(f=null),p.send(f)}))}},function(e,t,r){"use strict";var n=r(19);e.exports=function(e,t,r,o,i){var s=new Error(e);return n(s,t,r,o,i)}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){"use strict";var n=String.prototype.replace,o=/%20/g,i=r(2),s={RFC1738:"RFC1738",RFC3986:"RFC3986"};e.exports=i.assign({default:s.RFC3986,formatters:{RFC1738:function(e){return n.call(e,o,"+")},RFC3986:function(e){return String(e)}}},s)},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(10));t.default=o.default},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(11));t.default=function(e,t,r){return new o.default(e,t,r)}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=s(r(12)),c=i(r(31)),u=i(r(32));t.default=class{constructor(e,t,r,n){if(this.domainSettings=t,this.axios=a.default.create(Object.assign({baseURL:e,paramsSerializer:u.stringify},n)),this.storeConfig=Object.assign({cookie:{key:"jwt",options:{path:"/"}},localStorage:{key:"jwt"}},r),this.isBrowser()){let e;this.storeConfig.cookie?e=c.get(this.storeConfig.cookie.key):this.storeConfig.localStorage&&(e=JSON.parse(window.localStorage.getItem(this.storeConfig.localStorage.key))),e&&this.setToken(e,!0)}}async request(e,t,r){try{(this.isBrowser()&&void 0===typeof this.getToken()||null===typeof this.getToken()&&this.domainSettings&&void 0!==this.domainSettings.token)&&await this.login(this.domainSettings.domain,this.domainSettings.token);return(await this.axios.request(Object.assign({method:e,url:t},r))).data}catch(e){throw e.response?new Error(e.response.data.message):e}}async register(e,t,r){this.clearToken();const n=await this.request("post","/auth/local/register",{data:{email:t,password:r,username:e}});return this.setToken(n.jwt),n}async login(e,t){if(this.clearToken(),!t)throw new Error("Could not log back in. password/token not set.");const r=await this.request("post","/auth/local",{data:{identifier:e,password:t}});return this.setToken(r.jwt),r}async forgotPassword(e,t){this.clearToken(),await this.request("post","/auth/forgot-password",{data:{email:e,url:t}})}async resetPassword(e,t,r){this.clearToken(),await this.request("post","/auth/reset-password",{data:{code:e,password:t,passwordConfirmation:r}})}getProviderAuthenticationUrl(e){return`${this.axios.defaults.baseURL}/connect/${e}`}async authenticateProvider(e,t){this.clearToken(),this.isBrowser()&&(t=u.parse(window.location.search,{ignoreQueryPrefix:!0}));const r=await this.request("get",`/auth/${e}/callback`,{params:t});return this.setToken(r.jwt),r}getEntries(e,t){return this.request("get","/"+e,{params:t})}getEntryCount(e,t){return this.request("get",`/${e}/count`,{params:t})}getEntry(e,t){return this.request("get",`/${e}/${t}`)}createEntry(e,t){return this.request("post","/"+e,{data:t})}updateEntry(e,t,r){return this.request("put",`/${e}/${t}`,{data:r})}deleteEntry(e,t){return this.request("delete",`/${e}/${t}`)}searchFiles(e){return this.request("get","/upload/search/"+decodeURIComponent(e))}getFiles(e){return this.request("get","/upload/files",{params:e})}getFile(e){return this.request("get","/upload/files/"+e)}upload(e,t){return this.request("post","/upload",Object.assign({data:e},t))}setToken(e,t){this.axios.defaults.headers.common.Authorization="Bearer "+e,this.isBrowser()&&!t&&(this.storeConfig.localStorage&&window.localStorage.setItem(this.storeConfig.localStorage.key,JSON.stringify(e)),this.storeConfig.cookie&&c.set(this.storeConfig.cookie.key,e,this.storeConfig.cookie.options))}getToken(){if(this.isBrowser()){if(this.storeConfig.localStorage)return window.localStorage.getItem(this.storeConfig.localStorage.key);if(this.storeConfig.cookie)return c.get(this.storeConfig.cookie.key)}}clearToken(){delete this.axios.defaults.headers.common.Authorization,this.isBrowser()&&(this.storeConfig.localStorage&&window.localStorage.removeItem(this.storeConfig.localStorage.key),this.storeConfig.cookie&&c.remove(this.storeConfig.cookie.key,this.storeConfig.cookie.options))}isBrowser(){return"undefined"!=typeof window}}},function(e,t,r){e.exports=r(13)},function(e,t,r){"use strict";var n=r(0),o=r(3),i=r(15),s=r(1);function a(e){var t=new i(e),r=o(i.prototype.request,t);return n.extend(r,i.prototype,t),n.extend(r,t),r}var c=a(s);c.Axios=i,c.create=function(e){return a(n.merge(s,e))},c.Cancel=r(7),c.CancelToken=r(29),c.isCancel=r(6),c.all=function(e){return Promise.all(e)},c.spread=r(30),e.exports=c,e.exports.default=c},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,r){"use strict";var n=r(1),o=r(0),i=r(24),s=r(25);function a(e){this.defaults=e,this.interceptors={request:new i,response:new i}}a.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(n,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},o.forEach(["delete","get","head","options"],(function(e){a.prototype[e]=function(t,r){return this.request(o.merge(r||{},{method:e,url:t}))}})),o.forEach(["post","put","patch"],(function(e){a.prototype[e]=function(t,r,n){return this.request(o.merge(n||{},{method:e,url:t,data:r}))}})),e.exports=a},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(e){n=s}}();var c,u=[],f=!1,l=-1;function p(){f&&c&&(f=!1,c.length?u=c.concat(u):l=-1,u.length&&d())}function d(){if(!f){var e=a(p);f=!0;for(var t=u.length;t;){for(c=u,u=[];++l<t;)c&&c[l].run();l=-1,t=u.length}c=null,f=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new h(e,t)),1!==u.length||f||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},function(e,t,r){"use strict";var n=r(5);e.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e}},function(e,t,r){"use strict";var n=r(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(n.isURLSearchParams(t))i=t.toString();else{var s=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))})))})),i=s.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,r){"use strict";var n=r(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,i,s={};return e?(n.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([r]):s[t]?s[t]+", "+r:r}})),s):s}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var n=r(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,r){"use strict";var n=r(0),o=r(26),i=r(6),s=r(1),a=r(27),c=r(28);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.baseURL&&!a(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t,r){return n.forEach(r,(function(r){e=r(e,t)})),e}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(7);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){var n,o;
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */!function(i){if(void 0===(o="function"==typeof(n=i)?n.call(t,r,t,e):n)||(e.exports=o),!0,e.exports=i(),!!0){var s=window.Cookies,a=window.Cookies=i();a.noConflict=function(){return window.Cookies=s,a}}}((function(){function e(){for(var e=0,t={};e<arguments.length;e++){var r=arguments[e];for(var n in r)t[n]=r[n]}return t}function t(e){return e.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}return function r(n){function o(){}function i(t,r,i){if("undefined"!=typeof document){"number"==typeof(i=e({path:"/"},o.defaults,i)).expires&&(i.expires=new Date(1*new Date+864e5*i.expires)),i.expires=i.expires?i.expires.toUTCString():"";try{var s=JSON.stringify(r);/^[\{\[]/.test(s)&&(r=s)}catch(e){}r=n.write?n.write(r,t):encodeURIComponent(String(r)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),t=encodeURIComponent(String(t)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var a="";for(var c in i)i[c]&&(a+="; "+c,!0!==i[c]&&(a+="="+i[c].split(";")[0]));return document.cookie=t+"="+r+a}}function s(e,r){if("undefined"!=typeof document){for(var o={},i=document.cookie?document.cookie.split("; "):[],s=0;s<i.length;s++){var a=i[s].split("="),c=a.slice(1).join("=");r||'"'!==c.charAt(0)||(c=c.slice(1,-1));try{var u=t(a[0]);if(c=(n.read||n)(c,u)||t(c),r)try{c=JSON.parse(c)}catch(e){}if(o[u]=c,e===u)break}catch(e){}}return e?o[e]:o}}return o.set=i,o.get=function(e){return s(e,!1)},o.getJSON=function(e){return s(e,!0)},o.remove=function(t,r){i(t,"",e(r,{expires:-1}))},o.defaults={},o.withConverter=r,o}((function(){}))}))},function(e,t,r){"use strict";var n=r(33),o=r(34),i=r(8);e.exports={formats:i,parse:o,stringify:n}},function(e,t,r){"use strict";var n=r(2),o=r(8),i=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},a=Array.isArray,c=Array.prototype.push,u=function(e,t){c.apply(e,a(t)?t:[t])},f=Date.prototype.toISOString,l=o.default,p={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,format:l,formatter:o.formatters[l],indices:!1,serializeDate:function(e){return f.call(e)},skipNulls:!1,strictNullHandling:!1},d=function e(t,r,o,i,s,c,f,l,d,h,y,m,g){var v,w=t;if("function"==typeof f?w=f(r,w):w instanceof Date?w=h(w):"comma"===o&&a(w)&&(w=n.maybeMap(w,(function(e){return e instanceof Date?h(e):e})).join(",")),null===w){if(i)return c&&!m?c(r,p.encoder,g,"key"):r;w=""}if("string"==typeof(v=w)||"number"==typeof v||"boolean"==typeof v||"symbol"==typeof v||"bigint"==typeof v||n.isBuffer(w))return c?[y(m?r:c(r,p.encoder,g,"key"))+"="+y(c(w,p.encoder,g,"value"))]:[y(r)+"="+y(String(w))];var b,x=[];if(void 0===w)return x;if(a(f))b=f;else{var S=Object.keys(w);b=l?S.sort(l):S}for(var O=0;O<b.length;++O){var j=b[O],T=w[j];if(!s||null!==T){var C=a(w)?"function"==typeof o?o(r,j):r:r+(d?"."+j:"["+j+"]");u(x,e(T,C,o,i,s,c,f,l,d,h,y,m,g))}}return x};e.exports=function(e,t){var r,n=e,c=function(e){if(!e)return p;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||p.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var r=o.default;if(void 0!==e.format){if(!i.call(o.formatters,e.format))throw new TypeError("Unknown format option provided.");r=e.format}var n=o.formatters[r],s=p.filter;return("function"==typeof e.filter||a(e.filter))&&(s=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:p.addQueryPrefix,allowDots:void 0===e.allowDots?p.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:p.charsetSentinel,delimiter:void 0===e.delimiter?p.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:p.encode,encoder:"function"==typeof e.encoder?e.encoder:p.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:p.encodeValuesOnly,filter:s,formatter:n,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:p.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:p.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:p.strictNullHandling}}(t);"function"==typeof c.filter?n=(0,c.filter)("",n):a(c.filter)&&(r=c.filter);var f,l=[];if("object"!=typeof n||null===n)return"";f=t&&t.arrayFormat in s?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var h=s[f];r||(r=Object.keys(n)),c.sort&&r.sort(c.sort);for(var y=0;y<r.length;++y){var m=r[y];c.skipNulls&&null===n[m]||u(l,d(n[m],m,h,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.formatter,c.encodeValuesOnly,c.charset))}var g=l.join(c.delimiter),v=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?v+="utf8=%26%2310003%3B&":v+="utf8=%E2%9C%93&"),g.length>0?v+g:""}},function(e,t,r){"use strict";var n=r(2),o=Object.prototype.hasOwnProperty,i=Array.isArray,s={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:n.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},a=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},c=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},u=function(e,t,r,n){if(e){var i=r.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,a=r.depth>0&&/(\[[^[\]]*])/.exec(i),u=a?i.slice(0,a.index):i,f=[];if(u){if(!r.plainObjects&&o.call(Object.prototype,u)&&!r.allowPrototypes)return;f.push(u)}for(var l=0;r.depth>0&&null!==(a=s.exec(i))&&l<r.depth;){if(l+=1,!r.plainObjects&&o.call(Object.prototype,a[1].slice(1,-1))&&!r.allowPrototypes)return;f.push(a[1])}return a&&f.push("["+i.slice(a.index)+"]"),function(e,t,r,n){for(var o=n?t:c(t,r),i=e.length-1;i>=0;--i){var s,a=e[i];if("[]"===a&&r.parseArrays)s=[].concat(o);else{s=r.plainObjects?Object.create(null):{};var u="["===a.charAt(0)&&"]"===a.charAt(a.length-1)?a.slice(1,-1):a,f=parseInt(u,10);r.parseArrays||""!==u?!isNaN(f)&&a!==u&&String(f)===u&&f>=0&&r.parseArrays&&f<=r.arrayLimit?(s=[])[f]=o:s[u]=o:s={0:o}}o=s}return o}(f,t,r,n)}};e.exports=function(e,t){var r=function(e){if(!e)return s;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?s.charset:e.charset;return{allowDots:void 0===e.allowDots?s.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:s.allowPrototypes,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:s.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:s.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:s.comma,decoder:"function"==typeof e.decoder?e.decoder:s.decoder,delimiter:"string"==typeof e.delimiter||n.isRegExp(e.delimiter)?e.delimiter:s.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:s.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:s.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:s.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:s.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:s.strictNullHandling}}(t);if(""===e||null==e)return r.plainObjects?Object.create(null):{};for(var f="string"==typeof e?function(e,t){var r,u={},f=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,l=t.parameterLimit===1/0?void 0:t.parameterLimit,p=f.split(t.delimiter,l),d=-1,h=t.charset;if(t.charsetSentinel)for(r=0;r<p.length;++r)0===p[r].indexOf("utf8=")&&("utf8=%E2%9C%93"===p[r]?h="utf-8":"utf8=%26%2310003%3B"===p[r]&&(h="iso-8859-1"),d=r,r=p.length);for(r=0;r<p.length;++r)if(r!==d){var y,m,g=p[r],v=g.indexOf("]="),w=-1===v?g.indexOf("="):v+1;-1===w?(y=t.decoder(g,s.decoder,h,"key"),m=t.strictNullHandling?null:""):(y=t.decoder(g.slice(0,w),s.decoder,h,"key"),m=n.maybeMap(c(g.slice(w+1),t),(function(e){return t.decoder(e,s.decoder,h,"value")}))),m&&t.interpretNumericEntities&&"iso-8859-1"===h&&(m=a(m)),g.indexOf("[]=")>-1&&(m=i(m)?[m]:m),o.call(u,y)?u[y]=n.combine(u[y],m):u[y]=m}return u}(e,r):e,l=r.plainObjects?Object.create(null):{},p=Object.keys(f),d=0;d<p.length;++d){var h=p[d],y=u(h,f[h],r,"string"==typeof e);l=n.merge(l,y,r)}return n.compact(l)}},function(e,t,r){"use strict";r.r(t),r.d(t,"Factory",(function(){return y}));var n,o,i=r(9),s=r.n(i);!function(e){e.STRING="string",e.TEXT="text",e.INT="integer",e.MEDIA="media",e.COMPONENT="component",e.ENUMERATION="enumeration",e.LABEL="label"}(n||(n={})),function(e){e.COMPONENT="__component",e.LABEL="__label",e.ID="__id",e.CONTENT="content"}(o||(o={}));const a=["string","text","integer","media","component","boolean","enumeration","label"],c=["id","users"],u=["__component","__label","__id","content"];var f=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};class l{constructor(e,t){this.acceptedTypes=a,this.blacklistedProps=c,this.whitelistKeys=u,this.contentTypeUID=t,this.url=e+"/content-manager/content-types"}getContentType(){return f(this,void 0,void 0,(function*(){const e=yield fetch(`${this.url}/${this.contentTypeUID}`),t=yield e.json();t.statusCode&&(this.contentType=t.data)}))}setRequestState(e,t,r){if(parent)for(const n of this.request.content)n.__component===t&&(n[e]=r);return this.request[e]=r,this.fields}updateSchema(e,t,r){r?this.fields[r][e]=t:this.fields[e]=t}isBuildable(e){return e&&e.type&&this.acceptedTypes.includes(e.type)}isComponent(e){return e.type===n.COMPONENT}isValidType(e,t){return t&&this.isBuildable(t)&&!this.isComponent(t)&&!1!==this.acceptedTypes.includes(t.type)&&!this.blacklistedProps.includes(e)}isSimpleType(e,t){return!this.isComponent(t)&&this.isValidType(e,t)||this.whitelistKeys.includes(e)}buildSimpleType(e,t,r){this.isSimpleType(e,t)&&(this.fields[e]=t,this.fields[e].__label=e,this.fields[e].value=r?this.existingModel[r][e]:this.existingModel[e])}buildComplexType(e,t){if(this.isComponent(t)){const r=this.contentType.components[t.component].schema.attributes;r.__component=t.component,r.__label=e,this.fields.content.push(r),this.gatherSchema(r,e)}}gatherSchema(e,t){e=e||this.contentType.contentType.schema.attributes,Object.keys(e).map(r=>{this.isSimpleType(r,e[r])&&this.buildSimpleType(r,e[r],t),this.isComponent(e[r])&&this.buildComplexType(r,e[r])})}getSchema(e){return f(this,void 0,void 0,(function*(){return this.existingModel=e,yield this.getContentType(),this.gatherSchema(),this.fields}))}}var p=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};class d{constructor(e,t){this.strapiSDK=t,this.apiID=this.getApiID(e)}getApiID(e){if(0===e.indexOf("::")||0===e.indexOf("."))throw new Error("\n        Strapi Form Builder requires a global\n        content type id i.e. application::contentTypeUID.contentTypeUID\n      ");return e.slice(e.indexOf("::")+2,e.indexOf("."))}get strapi(){return this.strapiSDK}create(e){return p(this,void 0,void 0,(function*(){return yield this.strapiSDK.createEntry(this.apiID,e)}))}update(e,t){return p(this,void 0,void 0,(function*(){return yield this.strapiSDK.updateEntry(this.apiID,t||this.existingModel.id,e)}))}search(e){return p(this,void 0,void 0,(function*(){return yield this.strapiSDK.getEntries(this.apiID,e)}))}delete(e){return p(this,void 0,void 0,(function*(){this.strapiSDK.deleteEntry(this.apiID,e)}))}}var h=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};class y{constructor(e,t){if(!t)throw new Error("Strapi Form Builder needs auth to attach resources and relationships.");this.baseURL=e,this.sdk=s()(e,{domain:t.identifier,token:t.password})}getForm(e,t){return h(this,void 0,void 0,(function*(){return{fields:yield new l(this.baseURL,e).getSchema(t),actions:new d(e,this.sdk)}}))}getFormBuilder(e){return new l(this.baseURL,e)}getActions(e){return new d(e,this.sdk)}getStrapiAPI(){return this.sdk}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvQHRoZXRhcHJvb20vc3RyYXBpLXNkay1qYXZhc2NyaXB0L2J1aWxkL21haW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvQHRoZXRhcHJvb20vc3RyYXBpLXNkay1qYXZhc2NyaXB0L2J1aWxkL21haW4vbGliL3Byb3ZpZGVyLmpzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vbm9kZV9tb2R1bGVzL0B0aGV0YXByb29tL3N0cmFwaS1zZGstamF2YXNjcmlwdC9idWlsZC9tYWluL2xpYi9zZGsuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9qcy1jb29raWUvc3JjL2pzLmNvb2tpZS5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9xcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9zcmMvdHlwZXMvY29udGVudC1hdHRyaWJ1dGUtdHlwZXMudHMiLCJ3ZWJwYWNrOi8vU3RyYXBpRm9ybUJ1aWxkZXIvLi9zcmMvZm9ybS5idWlsZGVyLnRzIiwid2VicGFjazovL1N0cmFwaUZvcm1CdWlsZGVyLy4vc3JjL2Zvcm0uYWN0aW9ucy50cyIsIndlYnBhY2s6Ly9TdHJhcGlGb3JtQnVpbGRlci8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJ2YWwiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJsZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYXJndW1lbnRzIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJ1dGlscyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInByb2Nlc3MiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwiZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwibWV0aG9kIiwiaGFzIiwiQXJyYXkiLCJoZXhUYWJsZSIsImFycmF5IiwicHVzaCIsInRvVXBwZXJDYXNlIiwiYXJyYXlUb09iamVjdCIsInNvdXJjZSIsIm9wdGlvbnMiLCJwbGFpbk9iamVjdHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJrZXlzIiwicmVkdWNlIiwiYWNjIiwiY29tYmluZSIsImNvbmNhdCIsImNvbXBhY3QiLCJxdWV1ZSIsInByb3AiLCJyZWZzIiwiaXRlbSIsImoiLCJpbmRleE9mIiwicG9wIiwiY29tcGFjdGVkIiwiY29tcGFjdFF1ZXVlIiwiZGVjb2RlIiwiZGVjb2RlciIsImNoYXJzZXQiLCJzdHJXaXRob3V0UGx1cyIsInVuZXNjYXBlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlIiwiZGVmYXVsdEVuY29kZXIiLCJzdHJpbmciLCJTdHJpbmciLCJlc2NhcGUiLCIkMCIsInBhcnNlSW50Iiwic2xpY2UiLCJvdXQiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiY29uc3RydWN0b3IiLCJpc1JlZ0V4cCIsIm1heWJlTWFwIiwibWFwcGVkIiwiYWxsb3dQcm90b3R5cGVzIiwibWVyZ2VUYXJnZXQiLCJ0YXJnZXRJdGVtIiwiYXJncyIsImFwcGx5Iiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwib3BlbiIsInVybCIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwib250aW1lb3V0IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJ1bmRlZmluZWQiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsInRoZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImVycm9yIiwiRXJyb3IiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsIiwidGhpcyIsInBlcmNlbnRUd2VudGllcyIsInV0aWwiLCJGb3JtYXQiLCJSRkMxNzM4IiwiUkZDMzk4NiIsImZvcm1hdHRlcnMiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJwcm92aWRlcl8xIiwiZGVmYXVsdCIsInNka18xIiwiYmFzZVVSTCIsImRvbWFpbkNvbmZpZyIsInN0b3JlQ29uZmlnIiwiX19jcmVhdGVCaW5kaW5nIiwiayIsImsyIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsIl9faW1wb3J0U3RhciIsImF4aW9zXzEiLCJDb29raWVzIiwicXMiLCJkb21haW5TZXR0aW5ncyIsInJlcXVlc3RDb25maWciLCJheGlvcyIsImNvb2tpZSIsInBhdGgiLCJsb2NhbFN0b3JhZ2UiLCJpc0Jyb3dzZXIiLCJleGlzdGluZ1Rva2VuIiwiZ2V0SXRlbSIsInNldFRva2VuIiwiZ2V0VG9rZW4iLCJ0b2tlbiIsImxvZ2luIiwiZG9tYWluIiwiZW1haWwiLCJjbGVhclRva2VuIiwiYXV0aGVudGljYXRpb24iLCJqd3QiLCJpZGVudGlmaWVyIiwicGFzc3dvcmRDb25maXJtYXRpb24iLCJwcm92aWRlciIsImxvY2F0aW9uIiwic2VhcmNoIiwiaWdub3JlUXVlcnlQcmVmaXgiLCJjb250ZW50VHlwZVBsdXJhbGl6ZWQiLCJjb250ZW50VHlwZSIsImlkIiwicXVlcnkiLCJjb21lc0Zyb21TdG9yYWdlIiwic2V0SXRlbSIsInNldCIsInJlbW92ZUl0ZW0iLCJyZW1vdmUiLCJBeGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInNoaWZ0IiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidG9JU09TdHJpbmciLCJqb2luIiwiaWdub3JlRHVwbGljYXRlT2YiLCJwYXJzZWQiLCJzcGxpdCIsImxpbmUiLCJzdWJzdHIiLCJvcmlnaW5VUkwiLCJtc2llIiwidGVzdCIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0IiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsIndyaXRlIiwiZXhwaXJlcyIsInNlY3VyZSIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsIm1hdGNoIiwiUmVnRXhwIiwibm93IiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImgiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJyZWFzb24iLCJmbnMiLCJyZWxhdGl2ZVVSTCIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJjYWxsYmFjayIsImFyciIsIk9sZENvb2tpZXMiLCJhcGkiLCJub0NvbmZsaWN0IiwiYXR0cmlidXRlcyIsImluaXQiLCJjb252ZXJ0ZXIiLCJ0b1VUQ1N0cmluZyIsInN0cmluZ2lmaWVkQXR0cmlidXRlcyIsImF0dHJpYnV0ZU5hbWUiLCJqc29uIiwiamFyIiwiZ2V0SlNPTiIsIndpdGhDb252ZXJ0ZXIiLCJmb3JtYXRzIiwiYXJyYXlQcmVmaXhHZW5lcmF0b3JzIiwiYnJhY2tldHMiLCJwcmVmaXgiLCJjb21tYSIsImluZGljZXMiLCJyZXBlYXQiLCJwdXNoVG9BcnJheSIsInZhbHVlT3JBcnJheSIsInRvSVNPIiwiZGVmYXVsdEZvcm1hdCIsImFkZFF1ZXJ5UHJlZml4IiwiYWxsb3dEb3RzIiwiY2hhcnNldFNlbnRpbmVsIiwiZGVsaW1pdGVyIiwiZW5jb2RlciIsImVuY29kZVZhbHVlc09ubHkiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJzZXJpYWxpemVEYXRlIiwiZGF0ZSIsInNraXBOdWxscyIsInN0cmljdE51bGxIYW5kbGluZyIsImdlbmVyYXRlQXJyYXlQcmVmaXgiLCJmaWx0ZXIiLCJzb3J0Iiwib2JqS2V5cyIsInZhbHVlcyIsImtleVByZWZpeCIsIm9wdHMiLCJub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zIiwiYXJyYXlGb3JtYXQiLCJqb2luZWQiLCJhcnJheUxpbWl0IiwiZGVwdGgiLCJpbnRlcnByZXROdW1lcmljRW50aXRpZXMiLCJwYXJhbWV0ZXJMaW1pdCIsInBhcnNlQXJyYXlzIiwibnVtYmVyU3RyIiwiZnJvbUNoYXJDb2RlIiwicGFyc2VBcnJheVZhbHVlIiwicGFyc2VLZXlzIiwiZ2l2ZW5LZXkiLCJ2YWx1ZXNQYXJzZWQiLCJjaGlsZCIsInNlZ21lbnQiLCJleGVjIiwicGFyZW50IiwiaW5kZXgiLCJsZWFmIiwiY2xlYW5Sb290IiwiaXNOYU4iLCIwIiwicGFyc2VPYmplY3QiLCJub3JtYWxpemVQYXJzZU9wdGlvbnMiLCJ0ZW1wT2JqIiwiY2xlYW5TdHIiLCJsaW1pdCIsIkluZmluaXR5Iiwic2tpcEluZGV4IiwicGFydCIsImJyYWNrZXRFcXVhbHNQb3MiLCJwb3MiLCJlbmNvZGVkVmFsIiwicGFyc2VWYWx1ZXMiLCJuZXdPYmoiLCJBVFRJQlVURV9UWVBFUyIsIldISVRFTElTVF9LRVlTIiwiQXR0cmlidXRlVHlwZXNXaGl0ZWxpc3QiLCJBdHRyaWJ1dGVUeXBlc0JsYWNrbGlzdCIsIldoaXRlbGlzdEtleXMiLCJjb250ZW50VHlwZVVJRCIsImFjY2VwdGVkVHlwZXMiLCJibGFja2xpc3RlZFByb3BzIiwid2hpdGVsaXN0S2V5cyIsInJlcyIsImZldGNoIiwic3RhdHVzQ29kZSIsImNvbXBvbmVudElkIiwiY29tcG9uZW50IiwiY29udGVudCIsIl9fY29tcG9uZW50IiwiZmllbGRzIiwiZmllbGQiLCJ0eXBlIiwiaW5jbHVkZXMiLCJDT01QT05FTlQiLCJhdHRyaWJ1dGUiLCJpc0J1aWxkYWJsZSIsImlzQ29tcG9uZW50IiwiaXNWYWxpZFR5cGUiLCJjb21wb25lbnRLZXkiLCJpc1NpbXBsZVR5cGUiLCJfX2xhYmVsIiwiZXhpc3RpbmdNb2RlbCIsImNvbXBvbmVudEF0dHJzIiwiY29tcG9uZW50cyIsInNjaGVtYSIsImdhdGhlclNjaGVtYSIsIm1hcCIsImJ1aWxkU2ltcGxlVHlwZSIsImJ1aWxkQ29tcGxleFR5cGUiLCJleGlzdGluZ0VudHJ5IiwiZ2V0Q29udGVudFR5cGUiLCJTdHJhcGlGb3JtTWV0aG9kc0RlY29yYXRvciIsInN0cmFwaVNESyIsImFwaUlEIiwiZ2V0QXBpSUQiLCJjcmVhdGVFbnRyeSIsInVwZGF0ZUVudHJ5IiwiZ2V0RW50cmllcyIsImRlbGV0ZUVudHJ5Iiwic2RrIiwiZ2V0U2NoZW1hIiwiYWN0aW9ucyJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFB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WUFBWXBTLEtBQUtpUyxNQUFPL08sR0FBTWxELEtBQUtxUixjQUFjbk8sR0FBSTdLLE1BRzdFLE9BQU9zRixHLHlDQUNYLGFBQWFxQyxLQUFLZ1MsVUFBVUssV0FBV3JTLEtBQUtpUyxNQUFPdFUsTUFHL0MsT0FBT3VGLEcseUNBQ1hsRCxLQUFLZ1MsVUFBVU0sWUFBWXRTLEtBQUtpUyxNQUFPL08sTywwU0N0Q3BDLE1BQU0sRUFJWCxZQUFZdEMsRUFBaUJ4RCxHQUMzQixJQUFLQSxFQUFNLE1BQU0sSUFBSXlDLE1BQU0seUVBQzNCRyxLQUFLWSxRQUFVQSxFQUNmWixLQUFLdVMsSUFBTSxJQUFrQjNSLEVBQVMsQ0FBRXlCLE9BQVFqRixFQUFLc0YsV0FBWVAsTUFBTy9FLEVBQUtFLFdBR3pFLFFBQVF3UyxFQUF3QitCLEcseUNBQ3BDLE1BQU8sQ0FDTHBCLGFBQWMsSUFBSSxFQUFrQnpRLEtBQUtZLFFBQVNrUCxHQUFnQjBDLFVBQVVYLEdBQzVFWSxRQUFTLElBQUlWLEVBQTJCakMsRUFBZ0I5UCxLQUFLdVMsU0FJakUsZUFBZXpDLEdBQ2IsT0FBTyxJQUFJLEVBQWtCOVAsS0FBS1ksUUFBU2tQLEdBRzdDLFdBQVdBLEdBQ1QsT0FBTyxJQUFJaUMsRUFBMkJqQyxFQUFnQjlQLEtBQUt1UyxLQUc3RCxlQUNFLE9BQU92UyxLQUFLdVMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlN0cmFwaUZvcm1CdWlsZGVyXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlN0cmFwaUZvcm1CdWlsZGVyXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGhleFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgICAgIGFycmF5LnB1c2goJyUnICsgKChpIDwgMTYgPyAnMCcgOiAnJykgKyBpLnRvU3RyaW5nKDE2KSkudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufSgpKTtcblxudmFyIGNvbXBhY3RRdWV1ZSA9IGZ1bmN0aW9uIGNvbXBhY3RRdWV1ZShxdWV1ZSkge1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWUucG9wKCk7XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHZhciBjb21wYWN0ZWQgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9ialtqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFjdGVkLnB1c2gob2JqW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0ub2JqW2l0ZW0ucHJvcF0gPSBjb21wYWN0ZWQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgYXJyYXlUb09iamVjdCA9IGZ1bmN0aW9uIGFycmF5VG9PYmplY3Qoc291cmNlLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBvYmpbaV0gPSBzb3VyY2VbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIG1lcmdlID0gZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IDAgKi9cbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXQucHVzaChzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKChvcHRpb25zICYmIChvcHRpb25zLnBsYWluT2JqZWN0cyB8fCBvcHRpb25zLmFsbG93UHJvdG90eXBlcykpIHx8ICFoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0YXJnZXQsIHNvdXJjZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0IHx8IHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBbdGFyZ2V0XS5jb25jYXQoc291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgbWVyZ2VUYXJnZXQgPSB0YXJnZXQ7XG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiAhaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIG1lcmdlVGFyZ2V0ID0gYXJyYXlUb09iamVjdCh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICBpZiAoaGFzLmNhbGwodGFyZ2V0LCBpKSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRJdGVtID0gdGFyZ2V0W2ldO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRJdGVtICYmIHR5cGVvZiB0YXJnZXRJdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBtZXJnZSh0YXJnZXRJdGVtLCBpdGVtLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG5cbiAgICAgICAgaWYgKGhhcy5jYWxsKGFjYywga2V5KSkge1xuICAgICAgICAgICAgYWNjW2tleV0gPSBtZXJnZShhY2Nba2V5XSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG1lcmdlVGFyZ2V0KTtcbn07XG5cbnZhciBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ25TaW5nbGVTb3VyY2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgdGFyZ2V0KTtcbn07XG5cbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAoc3RyLCBkZWNvZGVyLCBjaGFyc2V0KSB7XG4gICAgdmFyIHN0cldpdGhvdXRQbHVzID0gc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgLy8gdW5lc2NhcGUgbmV2ZXIgdGhyb3dzLCBubyB0cnkuLi5jYXRjaCBuZWVkZWQ6XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cy5yZXBsYWNlKC8lWzAtOWEtZl17Mn0vZ2ksIHVuZXNjYXBlKTtcbiAgICB9XG4gICAgLy8gdXRmLThcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cldpdGhvdXRQbHVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cztcbiAgICB9XG59O1xuXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKHN0ciwgZGVmYXVsdEVuY29kZXIsIGNoYXJzZXQpIHtcbiAgICAvLyBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgd3JpdHRlbiBieSBCcmlhbiBXaGl0ZSAobXNjZGV4KSBmb3IgdGhlIGlvLmpzIGNvcmUgcXVlcnlzdHJpbmcgbGlicmFyeS5cbiAgICAvLyBJdCBoYXMgYmVlbiBhZGFwdGVkIGhlcmUgZm9yIHN0cmljdGVyIGFkaGVyZW5jZSB0byBSRkMgMzk4NlxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9IHN0cjtcbiAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgc3RyaW5nID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN0cik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICBzdHJpbmcgPSBTdHJpbmcoc3RyKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGUoc3RyaW5nKS5yZXBsYWNlKC8ldVswLTlhLWZdezR9L2dpLCBmdW5jdGlvbiAoJDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJTI2JTIzJyArIHBhcnNlSW50KCQwLnNsaWNlKDIpLCAxNikgKyAnJTNCJztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG91dCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgYyA9PT0gMHgyRCAvLyAtXG4gICAgICAgICAgICB8fCBjID09PSAweDJFIC8vIC5cbiAgICAgICAgICAgIHx8IGMgPT09IDB4NUYgLy8gX1xuICAgICAgICAgICAgfHwgYyA9PT0gMHg3RSAvLyB+XG4gICAgICAgICAgICB8fCAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgLy8gMC05XG4gICAgICAgICAgICB8fCAoYyA+PSAweDQxICYmIGMgPD0gMHg1QSkgLy8gYS16XG4gICAgICAgICAgICB8fCAoYyA+PSAweDYxICYmIGMgPD0gMHg3QSkgLy8gQS1aXG4gICAgICAgICkge1xuICAgICAgICAgICAgb3V0ICs9IHN0cmluZy5jaGFyQXQoaSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgaGV4VGFibGVbY107XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEMwIHwgKGMgPj4gNildICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEUwIHwgKGMgPj4gMTIpXSArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M0ZGKSA8PCAxMCkgfCAoc3RyaW5nLmNoYXJDb2RlQXQoaSkgJiAweDNGRikpO1xuICAgICAgICBvdXQgKz0gaGV4VGFibGVbMHhGMCB8IChjID4+IDE4KV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiAxMikgJiAweDNGKV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbnZhciBjb21wYWN0ID0gZnVuY3Rpb24gY29tcGFjdCh2YWx1ZSkge1xuICAgIHZhciBxdWV1ZSA9IFt7IG9iajogeyBvOiB2YWx1ZSB9LCBwcm9wOiAnbycgfV07XG4gICAgdmFyIHJlZnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZVtpXTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiByZWZzLmluZGV4T2YodmFsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHsgb2JqOiBvYmosIHByb3A6IGtleSB9KTtcbiAgICAgICAgICAgICAgICByZWZzLnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBhY3RRdWV1ZShxdWV1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgaXNSZWdFeHAgPSBmdW5jdGlvbiBpc1JlZ0V4cChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcblxudmFyIGlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIShvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopKTtcbn07XG5cbnZhciBjb21iaW5lID0gZnVuY3Rpb24gY29tYmluZShhLCBiKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdChhLCBiKTtcbn07XG5cbnZhciBtYXliZU1hcCA9IGZ1bmN0aW9uIG1heWJlTWFwKHZhbCwgZm4pIHtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhciBtYXBwZWQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG1hcHBlZC5wdXNoKGZuKHZhbFtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXBwZWQ7XG4gICAgfVxuICAgIHJldHVybiBmbih2YWwpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgYXJyYXlUb09iamVjdDogYXJyYXlUb09iamVjdCxcbiAgICBhc3NpZ246IGFzc2lnbixcbiAgICBjb21iaW5lOiBjb21iaW5lLFxuICAgIGNvbXBhY3Q6IGNvbXBhY3QsXG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICAgIGlzUmVnRXhwOiBpc1JlZ0V4cCxcbiAgICBtYXliZU1hcDogbWF5YmVNYXAsXG4gICAgbWVyZ2U6IG1lcmdlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIEZvcm1hdCA9IHtcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWwuYXNzaWduKFxuICAgIHtcbiAgICAgICAgJ2RlZmF1bHQnOiBGb3JtYXQuUkZDMzk4NixcbiAgICAgICAgZm9ybWF0dGVyczoge1xuICAgICAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBGb3JtYXRcbik7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHByb3ZpZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbGliL3Byb3ZpZGVyXCIpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHByb3ZpZGVyXzEuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlFTdzRSRUZCYzBNN1FVRkRkRU1zYTBKQlFXVXNhMEpCUVZFc1EwRkJReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzZGtfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zZGtcIikpO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGJhc2VVUkwsIGRvbWFpbkNvbmZpZywgc3RvcmVDb25maWcpIHtcbiAgICByZXR1cm4gbmV3IHNka18xLmRlZmF1bHQoYmFzZVVSTCwgZG9tYWluQ29uZmlnLCBzdG9yZUNvbmZpZyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljSEp2ZG1sa1pYSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZiR2xpTDNCeWIzWnBaR1Z5TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFc1owUkJRVFJFTzBGQlJUVkVMRzFDUVVORkxFOUJRV1VzUlVGRFppeFpRVUUwUWl4RlFVTTFRaXhYUVVGNVFqdEpRVVY2UWl4UFFVRlBMRWxCUVVrc1lVRkJUU3hEUVVGRExFOUJRVThzUlVGQlJTeFpRVUZaTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1FVRkRlRVFzUTBGQlF6dEJRVTVFTERSQ1FVMURJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xuY29uc3QgQ29va2llcyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwianMtY29va2llXCIpKTtcbmNvbnN0IHFzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJxc1wiKSk7XG5jbGFzcyBTdHJhcGkge1xuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY29uc3RydWN0b3IuXG4gICAgICogQHBhcmFtIGJhc2VVUkwgWW91ciBTdHJhcGkgaG9zdC5cbiAgICAgKiBAcGFyYW0gYXhpb3NDb25maWcgRXh0ZW5kIEF4aW9zIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYmFzZVVSTCwgZG9tYWluU2V0dGluZ3MsIHN0b3JlQ29uZmlnLCByZXF1ZXN0Q29uZmlnKSB7XG4gICAgICAgIHRoaXMuZG9tYWluU2V0dGluZ3MgPSBkb21haW5TZXR0aW5ncztcbiAgICAgICAgdGhpcy5heGlvcyA9IGF4aW9zXzEuZGVmYXVsdC5jcmVhdGUoT2JqZWN0LmFzc2lnbih7IGJhc2VVUkwsIHBhcmFtc1NlcmlhbGl6ZXI6IHFzLnN0cmluZ2lmeSB9LCByZXF1ZXN0Q29uZmlnKSk7XG4gICAgICAgIHRoaXMuc3RvcmVDb25maWcgPSBPYmplY3QuYXNzaWduKHsgY29va2llOiB7XG4gICAgICAgICAgICAgICAga2V5OiAnand0JyxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGg6ICcvJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGxvY2FsU3RvcmFnZToge1xuICAgICAgICAgICAgICAgIGtleTogJ2p3dCdcbiAgICAgICAgICAgIH0gfSwgc3RvcmVDb25maWcpO1xuICAgICAgICBpZiAodGhpcy5pc0Jyb3dzZXIoKSkge1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nVG9rZW47XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZUNvbmZpZy5jb29raWUpIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ1Rva2VuID0gQ29va2llcy5nZXQodGhpcy5zdG9yZUNvbmZpZy5jb29raWUua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc3RvcmVDb25maWcubG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdUb2tlbiA9IEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuc3RvcmVDb25maWcubG9jYWxTdG9yYWdlLmtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nVG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRva2VuKGV4aXN0aW5nVG9rZW4sIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF4aW9zIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0gbWV0aG9kIFJlcXVlc3QgbWV0aG9kXG4gICAgICogQHBhcmFtIHVybCBTZXJ2ZXIgVVJMXG4gICAgICogQHBhcmFtIHJlcXVlc3RDb25maWcgQ3VzdG9tIEF4aW9zIGNvbmZpZ1xuICAgICAqL1xuICAgIGFzeW5jIHJlcXVlc3QobWV0aG9kLCB1cmwsIHJlcXVlc3RDb25maWcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQnJvd3NlcigpXG4gICAgICAgICAgICAgICAgJiYgdHlwZW9mIHRoaXMuZ2V0VG9rZW4oKSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0aGlzLmdldFRva2VuKCkgPT09IG51bGxcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmRvbWFpblNldHRpbmdzXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5kb21haW5TZXR0aW5ncy50b2tlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2dpbih0aGlzLmRvbWFpblNldHRpbmdzLmRvbWFpbiwgdGhpcy5kb21haW5TZXR0aW5ncy50b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXhpb3MucmVxdWVzdChPYmplY3QuYXNzaWduKHsgbWV0aG9kLFxuICAgICAgICAgICAgICAgIHVybCB9LCByZXF1ZXN0Q29uZmlnKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBuZXcgdXNlci5cbiAgICAgKiBAcGFyYW0gdXNlcm5hbWVcbiAgICAgKiBAcGFyYW0gZW1haWxcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmRcbiAgICAgKiBAcmV0dXJucyBBdXRoZW50aWNhdGlvbiBVc2VyIHRva2VuIGFuZCBwcm9maWxlXG4gICAgICovXG4gICAgYXN5bmMgcmVnaXN0ZXIodXNlcm5hbWUsIGVtYWlsLCBwYXNzd29yZCkge1xuICAgICAgICB0aGlzLmNsZWFyVG9rZW4oKTtcbiAgICAgICAgY29uc3QgYXV0aGVudGljYXRpb24gPSBhd2FpdCB0aGlzLnJlcXVlc3QoJ3Bvc3QnLCAnL2F1dGgvbG9jYWwvcmVnaXN0ZXInLCB7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgdXNlcm5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0VG9rZW4oYXV0aGVudGljYXRpb24uand0KTtcbiAgICAgICAgcmV0dXJuIGF1dGhlbnRpY2F0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2dpbiBieSBnZXR0aW5nIGFuIGF1dGhlbnRpY2F0aW9uIHRva2VuLlxuICAgICAqIEBwYXJhbSBpZGVudGlmaWVyIENhbiBlaXRoZXIgYmUgYW4gZW1haWwgb3IgYSB1c2VybmFtZS5cbiAgICAgKiBAcGFyYW0gcGFzc3dvcmRcbiAgICAgKiBAcmV0dXJucyBBdXRoZW50aWNhdGlvbiBVc2VyIHRva2VuIGFuZCBwcm9maWxlXG4gICAgICovXG4gICAgYXN5bmMgbG9naW4oaWRlbnRpZmllciwgcGFzc3dvcmQpIHtcbiAgICAgICAgdGhpcy5jbGVhclRva2VuKCk7XG4gICAgICAgIGlmICghcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBsb2cgYmFjayBpbi4gcGFzc3dvcmQvdG9rZW4gbm90IHNldC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXV0aGVudGljYXRpb24gPSBhd2FpdCB0aGlzLnJlcXVlc3QoJ3Bvc3QnLCAnL2F1dGgvbG9jYWwnLCB7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICBwYXNzd29yZFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXRUb2tlbihhdXRoZW50aWNhdGlvbi5qd3QpO1xuICAgICAgICByZXR1cm4gYXV0aGVudGljYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGFuIGVtYWlsIHRvIGEgdXNlciB3aXRoIHRoZSBsaW5rIG9mIHlvdXIgcmVzZXQgcGFzc3dvcmQgcGFnZS5cbiAgICAgKiBUaGlzIGxpbmsgY29udGFpbnMgYW4gVVJMIHBhcmFtIGNvZGUgd2hpY2ggaXMgcmVxdWlyZWQgdG8gcmVzZXQgdXNlciBwYXNzd29yZC5cbiAgICAgKiBSZWNlaXZlZCBsaW5rIHVybCBmb3JtYXQgaHR0cHM6Ly9teS1kb21haW4uY29tL3Jlc3QtcGFzc3dvcmQ/Y29kZT1wcml2YXRlQ29kZS5cbiAgICAgKiBAcGFyYW0gZW1haWxcbiAgICAgKiBAcGFyYW0gdXJsIExpbmsgdGhhdCB1c2VyIHdpbGwgcmVjZWl2ZS5cbiAgICAgKi9cbiAgICBhc3luYyBmb3Jnb3RQYXNzd29yZChlbWFpbCwgdXJsKSB7XG4gICAgICAgIHRoaXMuY2xlYXJUb2tlbigpO1xuICAgICAgICBhd2FpdCB0aGlzLnJlcXVlc3QoJ3Bvc3QnLCAnL2F1dGgvZm9yZ290LXBhc3N3b3JkJywge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgICAgIHVybFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIHVzZXIgcGFzc3dvcmQuXG4gICAgICogQHBhcmFtIGNvZGUgSXMgdGhlIHVybCBwYXJhbXMgcmVjZWl2ZWQgZnJvbSB0aGUgZW1haWwgbGluayAoc2VlIGZvcmdvdCBwYXNzd29yZCkuXG4gICAgICogQHBhcmFtIHBhc3N3b3JkXG4gICAgICogQHBhcmFtIHBhc3N3b3JkQ29uZmlybWF0aW9uXG4gICAgICovXG4gICAgYXN5bmMgcmVzZXRQYXNzd29yZChjb2RlLCBwYXNzd29yZCwgcGFzc3dvcmRDb25maXJtYXRpb24pIHtcbiAgICAgICAgdGhpcy5jbGVhclRva2VuKCk7XG4gICAgICAgIGF3YWl0IHRoaXMucmVxdWVzdCgncG9zdCcsICcvYXV0aC9yZXNldC1wYXNzd29yZCcsIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkQ29uZmlybWF0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgY29ubmVjdCBwcm92aWRlciBVUkxcbiAgICAgKiBAcGFyYW0gcHJvdmlkZXJcbiAgICAgKi9cbiAgICBnZXRQcm92aWRlckF1dGhlbnRpY2F0aW9uVXJsKHByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmF4aW9zLmRlZmF1bHRzLmJhc2VVUkx9L2Nvbm5lY3QvJHtwcm92aWRlcn1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdXRoZW50aWNhdGUgdGhlIHVzZXIgd2l0aCB0aGUgdG9rZW4gcHJlc2VudCBvbiB0aGUgVVJMIChmb3IgYnJvd3Nlcikgb3IgaW4gYHBhcmFtc2AgKG9uIE5vZGUuanMpXG4gICAgICogQHBhcmFtIHByb3ZpZGVyXG4gICAgICogQHBhcmFtIHBhcmFtc1xuICAgICAqL1xuICAgIGFzeW5jIGF1dGhlbnRpY2F0ZVByb3ZpZGVyKHByb3ZpZGVyLCBwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5jbGVhclRva2VuKCk7XG4gICAgICAgIC8vIEhhbmRsaW5nIGJyb3dzZXIgcXVlcnlcbiAgICAgICAgaWYgKHRoaXMuaXNCcm93c2VyKCkpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHFzLnBhcnNlKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gsIHsgaWdub3JlUXVlcnlQcmVmaXg6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXV0aGVudGljYXRpb24gPSBhd2FpdCB0aGlzLnJlcXVlc3QoJ2dldCcsIGAvYXV0aC8ke3Byb3ZpZGVyfS9jYWxsYmFja2AsIHtcbiAgICAgICAgICAgIHBhcmFtc1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXRUb2tlbihhdXRoZW50aWNhdGlvbi5qd3QpO1xuICAgICAgICByZXR1cm4gYXV0aGVudGljYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpc3QgZW50cmllc1xuICAgICAqIEBwYXJhbSBjb250ZW50VHlwZVBsdXJhbGl6ZWRcbiAgICAgKiBAcGFyYW0gcGFyYW1zIEZpbHRlciBhbmQgb3JkZXIgcXVlcmllcy5cbiAgICAgKi9cbiAgICBnZXRFbnRyaWVzKGNvbnRlbnRUeXBlUGx1cmFsaXplZCwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ2dldCcsIGAvJHtjb250ZW50VHlwZVBsdXJhbGl6ZWR9YCwge1xuICAgICAgICAgICAgcGFyYW1zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRvdGFsIGNvdW50IG9mIGVudHJpZXMgd2l0aCB0aGUgcHJvdmlkZWQgY3JpdGVyaWFcbiAgICAgKiBAcGFyYW0gY29udGVudFR5cGVcbiAgICAgKiBAcGFyYW0gcGFyYW1zIEZpbHRlciBhbmQgb3JkZXIgcXVlcmllcy5cbiAgICAgKi9cbiAgICBnZXRFbnRyeUNvdW50KGNvbnRlbnRUeXBlLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZ2V0JywgYC8ke2NvbnRlbnRUeXBlfS9jb3VudGAsIHtcbiAgICAgICAgICAgIHBhcmFtc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgZW50cnlcbiAgICAgKiBAcGFyYW0gY29udGVudFR5cGVQbHVyYWxpemVkIFR5cGUgb2YgZW50cnkgcGx1cmFsaXplZFxuICAgICAqIEBwYXJhbSBpZCBJRCBvZiBlbnRyeVxuICAgICAqL1xuICAgIGdldEVudHJ5KGNvbnRlbnRUeXBlUGx1cmFsaXplZCwgaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZ2V0JywgYC8ke2NvbnRlbnRUeXBlUGx1cmFsaXplZH0vJHtpZH1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGRhdGFcbiAgICAgKiBAcGFyYW0gY29udGVudFR5cGVQbHVyYWxpemVkIFR5cGUgb2YgZW50cnkgcGx1cmFsaXplZFxuICAgICAqIEBwYXJhbSBkYXRhIE5ldyBlbnRyeVxuICAgICAqL1xuICAgIGNyZWF0ZUVudHJ5KGNvbnRlbnRUeXBlUGx1cmFsaXplZCwgZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdwb3N0JywgYC8ke2NvbnRlbnRUeXBlUGx1cmFsaXplZH1gLCB7XG4gICAgICAgICAgICBkYXRhXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgZGF0YVxuICAgICAqIEBwYXJhbSBjb250ZW50VHlwZVBsdXJhbGl6ZWQgVHlwZSBvZiBlbnRyeSBwbHVyYWxpemVkXG4gICAgICogQHBhcmFtIGlkIElEIG9mIGVudHJ5XG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKi9cbiAgICB1cGRhdGVFbnRyeShjb250ZW50VHlwZVBsdXJhbGl6ZWQsIGlkLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ3B1dCcsIGAvJHtjb250ZW50VHlwZVBsdXJhbGl6ZWR9LyR7aWR9YCwge1xuICAgICAgICAgICAgZGF0YVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFuIGVudHJ5XG4gICAgICogQHBhcmFtIGNvbnRlbnRUeXBlUGx1cmFsaXplZCBUeXBlIG9mIGVudHJ5IHBsdXJhbGl6ZWRcbiAgICAgKiBAcGFyYW0gaWQgSUQgb2YgZW50cnlcbiAgICAgKi9cbiAgICBkZWxldGVFbnRyeShjb250ZW50VHlwZVBsdXJhbGl6ZWQsIGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ2RlbGV0ZScsIGAvJHtjb250ZW50VHlwZVBsdXJhbGl6ZWR9LyR7aWR9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlYXJjaCBmb3IgZmlsZXNcbiAgICAgKiBAcGFyYW0gcXVlcnkgS2V5d29yZHNcbiAgICAgKi9cbiAgICBzZWFyY2hGaWxlcyhxdWVyeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdnZXQnLCBgL3VwbG9hZC9zZWFyY2gvJHtkZWNvZGVVUklDb21wb25lbnQocXVlcnkpfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgZmlsZXNcbiAgICAgKiBAcGFyYW0gcGFyYW1zIEZpbHRlciBhbmQgb3JkZXIgcXVlcmllc1xuICAgICAqIEByZXR1cm5zIE9iamVjdFtdIEZpbGVzIGRhdGFcbiAgICAgKi9cbiAgICBnZXRGaWxlcyhwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZ2V0JywgJy91cGxvYWQvZmlsZXMnLCB7XG4gICAgICAgICAgICBwYXJhbXNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBmaWxlXG4gICAgICogQHBhcmFtIGlkIElEIG9mIGVudHJ5XG4gICAgICovXG4gICAgZ2V0RmlsZShpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdnZXQnLCBgL3VwbG9hZC9maWxlcy8ke2lkfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgZmlsZXNcbiAgICAgKlxuICAgICAqICMjIyBCcm93c2VyIGV4YW1wbGVcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgKiBmb3JtLmFwcGVuZCgnZmlsZXMnLCBmaWxlSW5wdXRFbGVtZW50LmZpbGVzWzBdLCAnZmlsZS1uYW1lLmV4dCcpO1xuICAgICAqIGZvcm0uYXBwZW5kKCdmaWxlcycsIGZpbGVJbnB1dEVsZW1lbnQuZmlsZXNbMV0sICdmaWxlLTItbmFtZS5leHQnKTtcbiAgICAgKiBjb25zdCBmaWxlcyA9IGF3YWl0IHN0cmFwaS51cGxvYWQoZm9ybSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyMgTm9kZS5qcyBleGFtcGxlXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBGb3JtRGF0YSA9IHJlcXVpcmUoJ2Zvcm0tZGF0YScpO1xuICAgICAqIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgICAgKiBjb25zdCBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICogZm9ybS5hcHBlbmQoJ2ZpbGVzJywgZnMuY3JlYXRlUmVhZFN0cmVhbSgnLi9maWxlLW5hbWUuZXh0JyksICdmaWxlLW5hbWUuZXh0Jyk7XG4gICAgICogY29uc3QgZmlsZXMgPSBhd2FpdCBzdHJhcGkudXBsb2FkKGZvcm0sIHtcbiAgICAgKiAgIGhlYWRlcnM6IGZvcm0uZ2V0SGVhZGVycygpXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSBGb3JtRGF0YVxuICAgICAqIEBwYXJhbSByZXF1ZXN0Q29uZmlnXG4gICAgICovXG4gICAgdXBsb2FkKGRhdGEsIHJlcXVlc3RDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgncG9zdCcsICcvdXBsb2FkJywgT2JqZWN0LmFzc2lnbih7IGRhdGEgfSwgcmVxdWVzdENvbmZpZykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdG9rZW4gb24gQXhpb3MgY29uZmlndXJhdGlvblxuICAgICAqIEBwYXJhbSB0b2tlbiBSZXRyaWV2ZWQgYnkgcmVnaXN0ZXIgb3IgbG9naW5cbiAgICAgKi9cbiAgICBzZXRUb2tlbih0b2tlbiwgY29tZXNGcm9tU3RvcmFnZSkge1xuICAgICAgICB0aGlzLmF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmVhcmVyICcgKyB0b2tlbjtcbiAgICAgICAgaWYgKHRoaXMuaXNCcm93c2VyKCkgJiYgIWNvbWVzRnJvbVN0b3JhZ2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0b3JlQ29uZmlnLmxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnN0b3JlQ29uZmlnLmxvY2FsU3RvcmFnZS5rZXksIEpTT04uc3RyaW5naWZ5KHRva2VuKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZUNvbmZpZy5jb29raWUpIHtcbiAgICAgICAgICAgICAgICBDb29raWVzLnNldCh0aGlzLnN0b3JlQ29uZmlnLmNvb2tpZS5rZXksIHRva2VuLCB0aGlzLnN0b3JlQ29uZmlnLmNvb2tpZS5vcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRUb2tlbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNCcm93c2VyKCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0b3JlQ29uZmlnLmxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5zdG9yZUNvbmZpZy5sb2NhbFN0b3JhZ2Uua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnN0b3JlQ29uZmlnLmNvb2tpZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDb29raWVzLmdldCh0aGlzLnN0b3JlQ29uZmlnLmNvb2tpZS5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0b2tlbiBmcm9tIEF4aW9zIGNvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICBjbGVhclRva2VuKCkge1xuICAgICAgICBkZWxldGUgdGhpcy5heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uO1xuICAgICAgICBpZiAodGhpcy5pc0Jyb3dzZXIoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmVDb25maWcubG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuc3RvcmVDb25maWcubG9jYWxTdG9yYWdlLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZUNvbmZpZy5jb29raWUpIHtcbiAgICAgICAgICAgICAgICBDb29raWVzLnJlbW92ZSh0aGlzLnN0b3JlQ29uZmlnLmNvb2tpZS5rZXksIHRoaXMuc3RvcmVDb25maWcuY29va2llLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGl0IHJ1bnMgb24gYnJvd3NlclxuICAgICAqL1xuICAgIGlzQnJvd3NlcigpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFN0cmFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyUnJMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmMzSmpMMnhwWWk5elpHc3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJRVUVzYTBSQlFXZEdPMEZCUTJoR0xHMUVRVUZ4UXp0QlFVTnlReXgxUTBGQmVVSTdRVUZyUTNwQ0xFMUJRWEZDTEUxQlFVMDdTVUZMZWtJN096czdUMEZKUnp0SlFVTklMRmxCUTBVc1QwRkJaU3hGUVVObUxHTkJRVGhDTEVWQlF6bENMRmRCUVhsQ0xFVkJRM3BDTEdGQlFXdERPMUZCUld4RExFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NZMEZCWXl4RFFVRkRPMUZCUTNKRExFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NaVUZCU3l4RFFVRkRMRTFCUVUwc2FVSkJRM1pDTEU5QlFVOHNSVUZEVUN4blFrRkJaMElzUlVGQlJTeEZRVUZGTEVOQlFVTXNVMEZCVXl4SlFVTXpRaXhoUVVGaExFVkJRMmhDTEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc1YwRkJWeXh0UWtGRFpDeE5RVUZOTEVWQlFVVTdaMEpCUTA0c1IwRkJSeXhGUVVGRkxFdEJRVXM3WjBKQlExWXNUMEZCVHl4RlFVRkZPMjlDUVVOUUxFbEJRVWtzUlVGQlJTeEhRVUZITzJsQ1FVTldPMkZCUTBZc1JVRkRSQ3haUVVGWkxFVkJRVVU3WjBKQlExb3NSMEZCUnl4RlFVRkZMRXRCUVVzN1lVRkRXQ3hKUVVORkxGZEJRVmNzUTBGRFppeERRVUZETzFGQlJVWXNTVUZCU1N4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFVkJRVVU3V1VGRGNFSXNTVUZCU1N4aFFVRmhMRU5CUVVNN1dVRkRiRUlzU1VGQlNTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1JVRkJSVHRuUWtGRE0wSXNZVUZCWVN4SFFVRkhMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03WVVGRE1VUTdhVUpCUVUwc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZsQlFWa3NSVUZCUlR0blFrRkRlRU1zWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlEzQkVMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZEZUVJc1EwRkJReXhEUVVGRE8yRkJRMlE3V1VGRFJDeEpRVUZKTEdGQlFXRXNSVUZCUlR0blFrRkRha0lzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4aFFVRmhMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03WVVGRGNFTTdVMEZEUmp0SlFVTklMRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlEyeENMRTFCUVdNc1JVRkRaQ3hIUVVGWExFVkJRMWdzWVVGQmEwTTdVVUZGYkVNc1NVRkJTVHRaUVVOR0xFbEJRMFVzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlR0dFFrRkRZaXhQUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU3l4VFFVRlRMRWxCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVc3NTVUZCU1R0dFFrRkRka1VzU1VGQlNTeERRVUZETEdOQlFXTTdiVUpCUTI1Q0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4TFFVRkxMRk5CUVZNc1JVRkRNVU03WjBKQlEwRXNUVUZCVFN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdZVUZEZUVVN1dVRkZSQ3hOUVVGTkxGRkJRVkVzUjBGQmEwSXNUVUZCVFN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzYVVKQlEzUkVMRTFCUVUwN1owSkJRMDRzUjBGQlJ5eEpRVU5CTEdGQlFXRXNSVUZEYUVJc1EwRkJRenRaUVVOSUxFOUJRVThzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0VFFVTjBRanRSUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTzFsQlEyUXNTVUZCU1N4TFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRk8yZENRVU5zUWl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8yRkJRemxETzJsQ1FVRk5PMmRDUVVOTUxFMUJRVTBzUzBGQlN5eERRVUZETzJGQlEySTdVMEZEUmp0SlFVTklMRU5CUVVNN1NVRkZSRHM3T3pzN08wOUJUVWM3U1VGRFNTeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVTnVRaXhSUVVGblFpeEZRVU5vUWl4TFFVRmhMRVZCUTJJc1VVRkJaMEk3VVVGRmFFSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8xRkJRMnhDTEUxQlFVMHNZMEZCWXl4SFFVRnRRaXhOUVVGTkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlEzWkVMRTFCUVUwc1JVRkRUaXh6UWtGQmMwSXNSVUZEZEVJN1dVRkRSU3hKUVVGSkxFVkJRVVU3WjBKQlEwb3NTMEZCU3p0blFrRkRUQ3hSUVVGUk8yZENRVU5TTEZGQlFWRTdZVUZEVkR0VFFVTkdMRU5CUTBZc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRMnhETEU5QlFVOHNZMEZCWXl4RFFVRkRPMGxCUTNoQ0xFTkJRVU03U1VGRlJEczdPenM3VDBGTFJ6dEpRVU5KTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUTJoQ0xGVkJRV3RDTEVWQlEyeENMRkZCUVN0Q08xRkJSUzlDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRSUVVOc1FpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMWxCUTJJc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eG5SRUZCWjBRc1EwRkJReXhEUVVGRE8xTkJRMjVGTzFGQlJVUXNUVUZCVFN4alFVRmpMRWRCUVcxQ0xFMUJRVTBzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZEZGtRc1RVRkJUU3hGUVVOT0xHRkJRV0VzUlVGRFlqdFpRVU5GTEVsQlFVa3NSVUZCUlR0blFrRkRTaXhWUVVGVk8yZENRVU5XTEZGQlFWRTdZVUZEVkR0VFFVTkdMRU5CUTBZc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRMnhETEU5QlFVOHNZMEZCWXl4RFFVRkRPMGxCUTNoQ0xFTkJRVU03U1VGRlJEczdPenM3TzA5QlRVYzdTVUZEU1N4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRV0VzUlVGQlJTeEhRVUZYTzFGQlEzQkVMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dFJRVU5zUWl4TlFVRk5MRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTEhWQ1FVRjFRaXhGUVVGRk8xbEJRMnhFTEVsQlFVa3NSVUZCUlR0blFrRkRTaXhMUVVGTE8yZENRVU5NTEVkQlFVYzdZVUZEU2p0VFFVTkdMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPenM3VDBGTFJ6dEpRVU5KTEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUTNoQ0xFbEJRVmtzUlVGRFdpeFJRVUZuUWl4RlFVTm9RaXh2UWtGQk5FSTdVVUZGTlVJc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzFGQlEyeENMRTFCUVUwc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVXNjMEpCUVhOQ0xFVkJRVVU3V1VGRGFrUXNTVUZCU1N4RlFVRkZPMmRDUVVOS0xFbEJRVWs3WjBKQlEwb3NVVUZCVVR0blFrRkRVaXh2UWtGQmIwSTdZVUZEY2tJN1UwRkRSaXhEUVVGRExFTkJRVU03U1VGRFRDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGtzTkVKQlFUUkNMRU5CUVVNc1VVRkJhMEk3VVVGRGNFUXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNXVUZCV1N4UlFVRlJMRVZCUVVVc1EwRkJRenRKUVVNNVJDeERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5KTEV0QlFVc3NRMEZCUXl4dlFrRkJiMElzUTBGREwwSXNVVUZCYTBJc1JVRkRiRUlzVFVGQmMwSTdVVUZGZEVJc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzFGQlEyeENMSGxDUVVGNVFqdFJRVU42UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUlVGQlJUdFpRVU53UWl4TlFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxHbENRVUZwUWl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03VTBGRGVFVTdVVUZEUkN4TlFVRk5MR05CUVdNc1IwRkJiVUlzVFVGQlRTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVTjJSQ3hMUVVGTExFVkJRMHdzVTBGQlV5eFJRVUZSTEZkQlFWY3NSVUZETlVJN1dVRkRSU3hOUVVGTk8xTkJRMUFzUTBGRFJpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEYkVNc1QwRkJUeXhqUVVGakxFTkJRVU03U1VGRGVFSXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU1N4VlFVRlZMRU5CUTJZc2NVSkJRVFpDTEVWQlF6ZENMRTFCUVhGRE8xRkJSWEpETEU5QlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeHhRa0ZCY1VJc1JVRkJSU3hGUVVGRk8xbEJRM1JFTEUxQlFVMDdVMEZEVUN4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSkxHRkJRV0VzUTBGRGJFSXNWMEZCYlVJc1JVRkRia0lzVFVGQmNVTTdVVUZGY2tNc1QwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRmRCUVZjc1VVRkJVU3hGUVVGRk8xbEJRMnhFTEUxQlFVMDdVMEZEVUN4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSkxGRkJRVkVzUTBGQlF5eHhRa0ZCTmtJc1JVRkJSU3hGUVVGVk8xRkJRM1pFTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeHhRa0ZCY1VJc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlEyaEZMRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBrc1YwRkJWeXhEUVVOb1FpeHhRa0ZCTmtJc1JVRkROMElzU1VGQlowTTdVVUZGYUVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMSEZDUVVGeFFpeEZRVUZGTEVWQlFVVTdXVUZEZGtRc1NVRkJTVHRUUVVOTUxFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN096czdUMEZMUnp0SlFVTkpMRmRCUVZjc1EwRkRhRUlzY1VKQlFUWkNMRVZCUXpkQ0xFVkJRVlVzUlVGRFZpeEpRVUZuUXp0UlFVVm9ReXhQUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc2NVSkJRWEZDTEVsQlFVa3NSVUZCUlN4RlFVRkZMRVZCUVVVN1dVRkROVVFzU1VGQlNUdFRRVU5NTEVOQlFVTXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBrc1YwRkJWeXhEUVVOb1FpeHhRa0ZCTmtJc1JVRkROMElzUlVGQlZUdFJRVVZXTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzU1VGQlNTeHhRa0ZCY1VJc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlEyNUZMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU1N4WFFVRlhMRU5CUVVNc1MwRkJZVHRSUVVNNVFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhGUVVGRkxHdENRVUZyUWl4clFrRkJhMElzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkROVVVzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNTeFJRVUZSTEVOQlFVTXNUVUZCY1VNN1VVRkRia1FzVDBGQlR5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hsUVVGbExFVkJRVVU3V1VGRE1VTXNUVUZCVFR0VFFVTlFMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTU3hQUVVGUExFTkJRVU1zUlVGQlZUdFJRVU4yUWl4UFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eEZRVUZGTEdsQ1FVRnBRaXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlEzQkVMRU5CUVVNN1NVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wOUJkMEpITzBsQlEwa3NUVUZCVFN4RFFVTllMRWxCUVdNc1JVRkRaQ3hoUVVGclF6dFJRVVZzUXl4UFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTEZOQlFWTXNhMEpCUTI1RExFbEJRVWtzU1VGRFJDeGhRVUZoTEVWQlEyaENMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBrc1VVRkJVU3hEUVVGRExFdEJRV0VzUlVGQlJTeG5Ra0ZCTUVJN1VVRkRka1FzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVkQlFVY3NVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVOeVJTeEpRVUZKTEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RlFVRkZPMWxCUTNwRExFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4WlFVRlpMRVZCUVVVN1owSkJRMnBETEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVONlFpeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFVkJRMnBETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRM1JDTEVOQlFVTTdZVUZEU0R0WlFVTkVMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVTdaMEpCUXpOQ0xFOUJRVThzUTBGQlF5eEhRVUZITEVOQlExUXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVU16UWl4TFFVRkxMRVZCUTB3c1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVTm9ReXhEUVVGRE8yRkJRMGc3VTBGRFJqdEpRVU5JTEVOQlFVTTdTVUZGVFN4UlFVRlJPMUZCUTJJc1NVRkJTU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVWQlFVVTdXVUZEY0VJc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZsQlFWa3NSVUZCUlR0blFrRkRha01zVDBGQlR5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkRhRU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4WlFVRlpMRU5CUVVNc1IwRkJSeXhEUVVOc1F5eERRVUZETzJGQlEwZzdXVUZEUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTzJkQ1FVTXpRaXhQUVVGUExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdZVUZEYWtRN1UwRkRSanRKUVVOSUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTkpMRlZCUVZVN1VVRkRaaXhQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETzFGQlEzaEVMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeEZRVUZGTzFsQlEzQkNMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFpRVUZaTEVWQlFVVTdaMEpCUTJwRExFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMkZCUTI1Rk8xbEJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1JVRkJSVHRuUWtGRE0wSXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkRXaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUXpOQ0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkRhRU1zUTBGQlF6dGhRVU5JTzFOQlEwWTdTVUZEU0N4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFN5eFRRVUZUTzFGQlEyWXNUMEZCVHl4UFFVRlBMRTFCUVUwc1MwRkJTeXhYUVVGWExFTkJRVU03U1VGRGRrTXNRMEZCUXp0RFFVTkdPMEZCTDFwRUxIbENRU3RhUXlKOSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIi8qIVxuICogSmF2YVNjcmlwdCBDb29raWUgdjIuMi4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanMtY29va2llL2pzLWNvb2tpZVxuICpcbiAqIENvcHlyaWdodCAyMDA2LCAyMDE1IEtsYXVzIEhhcnRsICYgRmFnbmVyIEJyYWNrXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR2YXIgcmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyO1xuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKCFyZWdpc3RlcmVkSW5Nb2R1bGVMb2FkZXIpIHtcblx0XHR2YXIgT2xkQ29va2llcyA9IHdpbmRvdy5Db29raWVzO1xuXHRcdHZhciBhcGkgPSB3aW5kb3cuQ29va2llcyA9IGZhY3RvcnkoKTtcblx0XHRhcGkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHdpbmRvdy5Db29raWVzID0gT2xkQ29va2llcztcblx0XHRcdHJldHVybiBhcGk7XG5cdFx0fTtcblx0fVxufShmdW5jdGlvbiAoKSB7XG5cdGZ1bmN0aW9uIGV4dGVuZCAoKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciByZXN1bHQgPSB7fTtcblx0XHRmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBhcmd1bWVudHNbIGkgXTtcblx0XHRcdGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdHJlc3VsdFtrZXldID0gYXR0cmlidXRlc1trZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlIChzKSB7XG5cdFx0cmV0dXJuIHMucmVwbGFjZSgvKCVbMC05QS1aXXsyfSkrL2csIGRlY29kZVVSSUNvbXBvbmVudCk7XG5cdH1cblxuXHRmdW5jdGlvbiBpbml0IChjb252ZXJ0ZXIpIHtcblx0XHRmdW5jdGlvbiBhcGkoKSB7fVxuXG5cdFx0ZnVuY3Rpb24gc2V0IChrZXksIHZhbHVlLCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGF0dHJpYnV0ZXMgPSBleHRlbmQoe1xuXHRcdFx0XHRwYXRoOiAnLydcblx0XHRcdH0sIGFwaS5kZWZhdWx0cywgYXR0cmlidXRlcyk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXR0cmlidXRlcy5leHBpcmVzID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRhdHRyaWJ1dGVzLmV4cGlyZXMgPSBuZXcgRGF0ZShuZXcgRGF0ZSgpICogMSArIGF0dHJpYnV0ZXMuZXhwaXJlcyAqIDg2NGUrNSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlJ3JlIHVzaW5nIFwiZXhwaXJlc1wiIGJlY2F1c2UgXCJtYXgtYWdlXCIgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxuXHRcdFx0YXR0cmlidXRlcy5leHBpcmVzID0gYXR0cmlidXRlcy5leHBpcmVzID8gYXR0cmlidXRlcy5leHBpcmVzLnRvVVRDU3RyaW5nKCkgOiAnJztcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0XHRcdFx0aWYgKC9eW1xce1xcW10vLnRlc3QocmVzdWx0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXG5cdFx0XHR2YWx1ZSA9IGNvbnZlcnRlci53cml0ZSA/XG5cdFx0XHRcdGNvbnZlcnRlci53cml0ZSh2YWx1ZSwga2V5KSA6XG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcodmFsdWUpKVxuXHRcdFx0XHRcdC5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDNBfDNDfDNFfDNEfDJGfDNGfDQwfDVCfDVEfDVFfDYwfDdCfDdEfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpO1xuXG5cdFx0XHRrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGtleSkpXG5cdFx0XHRcdC5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDVFfDYwfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpXG5cdFx0XHRcdC5yZXBsYWNlKC9bXFwoXFwpXS9nLCBlc2NhcGUpO1xuXG5cdFx0XHR2YXIgc3RyaW5naWZpZWRBdHRyaWJ1dGVzID0gJyc7XG5cdFx0XHRmb3IgKHZhciBhdHRyaWJ1dGVOYW1lIGluIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0aWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc7ICcgKyBhdHRyaWJ1dGVOYW1lO1xuXHRcdFx0XHRpZiAoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ29uc2lkZXJzIFJGQyA2MjY1IHNlY3Rpb24gNS4yOlxuXHRcdFx0XHQvLyAuLi5cblx0XHRcdFx0Ly8gMy4gIElmIHRoZSByZW1haW5pbmcgdW5wYXJzZWQtYXR0cmlidXRlcyBjb250YWlucyBhICV4M0IgKFwiO1wiKVxuXHRcdFx0XHQvLyAgICAgY2hhcmFjdGVyOlxuXHRcdFx0XHQvLyBDb25zdW1lIHRoZSBjaGFyYWN0ZXJzIG9mIHRoZSB1bnBhcnNlZC1hdHRyaWJ1dGVzIHVwIHRvLFxuXHRcdFx0XHQvLyBub3QgaW5jbHVkaW5nLCB0aGUgZmlyc3QgJXgzQiAoXCI7XCIpIGNoYXJhY3Rlci5cblx0XHRcdFx0Ly8gLi4uXG5cdFx0XHRcdHN0cmluZ2lmaWVkQXR0cmlidXRlcyArPSAnPScgKyBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdLnNwbGl0KCc7JylbMF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoZG9jdW1lbnQuY29va2llID0ga2V5ICsgJz0nICsgdmFsdWUgKyBzdHJpbmdpZmllZEF0dHJpYnV0ZXMpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldCAoa2V5LCBqc29uKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBqYXIgPSB7fTtcblx0XHRcdC8vIFRvIHByZXZlbnQgdGhlIGZvciBsb29wIGluIHRoZSBmaXJzdCBwbGFjZSBhc3NpZ24gYW4gZW1wdHkgYXJyYXlcblx0XHRcdC8vIGluIGNhc2UgdGhlcmUgYXJlIG5vIGNvb2tpZXMgYXQgYWxsLlxuXHRcdFx0dmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUgPyBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykgOiBbXTtcblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0Zm9yICg7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJ0cyA9IGNvb2tpZXNbaV0uc3BsaXQoJz0nKTtcblx0XHRcdFx0dmFyIGNvb2tpZSA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJz0nKTtcblxuXHRcdFx0XHRpZiAoIWpzb24gJiYgY29va2llLmNoYXJBdCgwKSA9PT0gJ1wiJykge1xuXHRcdFx0XHRcdGNvb2tpZSA9IGNvb2tpZS5zbGljZSgxLCAtMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBuYW1lID0gZGVjb2RlKHBhcnRzWzBdKTtcblx0XHRcdFx0XHRjb29raWUgPSAoY29udmVydGVyLnJlYWQgfHwgY29udmVydGVyKShjb29raWUsIG5hbWUpIHx8XG5cdFx0XHRcdFx0XHRkZWNvZGUoY29va2llKTtcblxuXHRcdFx0XHRcdGlmIChqc29uKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRjb29raWUgPSBKU09OLnBhcnNlKGNvb2tpZSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGphcltuYW1lXSA9IGNvb2tpZTtcblxuXHRcdFx0XHRcdGlmIChrZXkgPT09IG5hbWUpIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGtleSA/IGphcltrZXldIDogamFyO1xuXHRcdH1cblxuXHRcdGFwaS5zZXQgPSBzZXQ7XG5cdFx0YXBpLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBnZXQoa2V5LCBmYWxzZSAvKiByZWFkIGFzIHJhdyAqLyk7XG5cdFx0fTtcblx0XHRhcGkuZ2V0SlNPTiA9IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBnZXQoa2V5LCB0cnVlIC8qIHJlYWQgYXMganNvbiAqLyk7XG5cdFx0fTtcblx0XHRhcGkucmVtb3ZlID0gZnVuY3Rpb24gKGtleSwgYXR0cmlidXRlcykge1xuXHRcdFx0c2V0KGtleSwgJycsIGV4dGVuZChhdHRyaWJ1dGVzLCB7XG5cdFx0XHRcdGV4cGlyZXM6IC0xXG5cdFx0XHR9KSk7XG5cdFx0fTtcblxuXHRcdGFwaS5kZWZhdWx0cyA9IHt9O1xuXG5cdFx0YXBpLndpdGhDb252ZXJ0ZXIgPSBpbml0O1xuXG5cdFx0cmV0dXJuIGFwaTtcblx0fVxuXG5cdHJldHVybiBpbml0KGZ1bmN0aW9uICgpIHt9KTtcbn0pKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG52YXIgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmb3JtYXRzOiBmb3JtYXRzLFxuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgYXJyYXlQcmVmaXhHZW5lcmF0b3JzID0ge1xuICAgIGJyYWNrZXRzOiBmdW5jdGlvbiBicmFja2V0cyhwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbXSc7XG4gICAgfSxcbiAgICBjb21tYTogJ2NvbW1hJyxcbiAgICBpbmRpY2VzOiBmdW5jdGlvbiBpbmRpY2VzKHByZWZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnWycgKyBrZXkgKyAnXSc7XG4gICAgfSxcbiAgICByZXBlYXQ6IGZ1bmN0aW9uIHJlcGVhdChwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgcHVzaCA9IEFycmF5LnByb3RvdHlwZS5wdXNoO1xudmFyIHB1c2hUb0FycmF5ID0gZnVuY3Rpb24gKGFyciwgdmFsdWVPckFycmF5KSB7XG4gICAgcHVzaC5hcHBseShhcnIsIGlzQXJyYXkodmFsdWVPckFycmF5KSA/IHZhbHVlT3JBcnJheSA6IFt2YWx1ZU9yQXJyYXldKTtcbn07XG5cbnZhciB0b0lTTyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgZGVmYXVsdEZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhZGRRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZW5jb2RlOiB0cnVlLFxuICAgIGVuY29kZXI6IHV0aWxzLmVuY29kZSxcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OiBmYWxzZSxcbiAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXQsXG4gICAgZm9ybWF0dGVyOiBmb3JtYXRzLmZvcm1hdHRlcnNbZGVmYXVsdEZvcm1hdF0sXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGluZGljZXM6IGZhbHNlLFxuICAgIHNlcmlhbGl6ZURhdGU6IGZ1bmN0aW9uIHNlcmlhbGl6ZURhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gdG9JU08uY2FsbChkYXRlKTtcbiAgICB9LFxuICAgIHNraXBOdWxsczogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ251bWJlcidcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdib29sZWFuJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ3N5bWJvbCdcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdiaWdpbnQnO1xufTtcblxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShcbiAgICBvYmplY3QsXG4gICAgcHJlZml4LFxuICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVyLFxuICAgIGZpbHRlcixcbiAgICBzb3J0LFxuICAgIGFsbG93RG90cyxcbiAgICBzZXJpYWxpemVEYXRlLFxuICAgIGZvcm1hdHRlcixcbiAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgIGNoYXJzZXRcbikge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqID0gZmlsdGVyKHByZWZpeCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgb2JqID0gc2VyaWFsaXplRGF0ZShvYmopO1xuICAgIH0gZWxzZSBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgb2JqID0gdXRpbHMubWF5YmVNYXAob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pLmpvaW4oJywnKTtcbiAgICB9XG5cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzdHJpY3ROdWxsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVyICYmICFlbmNvZGVWYWx1ZXNPbmx5ID8gZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknKSA6IHByZWZpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmIChpc05vbk51bGxpc2hQcmltaXRpdmUob2JqKSB8fCB1dGlscy5pc0J1ZmZlcihvYmopKSB7XG4gICAgICAgIGlmIChlbmNvZGVyKSB7XG4gICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBlbmNvZGVWYWx1ZXNPbmx5ID8gcHJlZml4IDogZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ3ZhbHVlJykpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihwcmVmaXgpICsgJz0nICsgZm9ybWF0dGVyKFN0cmluZyhvYmopKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIG9iaktleXM7XG4gICAgaWYgKGlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgICAgaWYgKHNraXBOdWxscyAmJiB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5UHJlZml4ID0gaXNBcnJheShvYmopXG4gICAgICAgICAgICA/IHR5cGVvZiBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnZnVuY3Rpb24nID8gZ2VuZXJhdGVBcnJheVByZWZpeChwcmVmaXgsIGtleSkgOiBwcmVmaXhcbiAgICAgICAgICAgIDogcHJlZml4ICsgKGFsbG93RG90cyA/ICcuJyArIGtleSA6ICdbJyArIGtleSArICddJyk7XG5cbiAgICAgICAgcHVzaFRvQXJyYXkodmFsdWVzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGtleVByZWZpeCxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICBlbmNvZGVyLFxuICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgIGFsbG93RG90cyxcbiAgICAgICAgICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgY2hhcnNldFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcblxudmFyIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmVuY29kZXIgIT09IG51bGwgJiYgb3B0cy5lbmNvZGVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdHMuZW5jb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbmNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBjaGFyc2V0ID0gb3B0cy5jaGFyc2V0IHx8IGRlZmF1bHRzLmNoYXJzZXQ7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmNoYXJzZXQgIT09ICd1bmRlZmluZWQnICYmIG9wdHMuY2hhcnNldCAhPT0gJ3V0Zi04JyAmJiBvcHRzLmNoYXJzZXQgIT09ICdpc28tODg1OS0xJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzWydkZWZhdWx0J107XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZvcm1hdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKCFoYXMuY2FsbChmb3JtYXRzLmZvcm1hdHRlcnMsIG9wdHMuZm9ybWF0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBmb3JtYXQgb3B0aW9uIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIGZvcm1hdCA9IG9wdHMuZm9ybWF0O1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgICB2YXIgZmlsdGVyID0gZGVmYXVsdHMuZmlsdGVyO1xuICAgIGlmICh0eXBlb2Ygb3B0cy5maWx0ZXIgPT09ICdmdW5jdGlvbicgfHwgaXNBcnJheShvcHRzLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0cy5maWx0ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkUXVlcnlQcmVmaXg6IHR5cGVvZiBvcHRzLmFkZFF1ZXJ5UHJlZml4ID09PSAnYm9vbGVhbicgPyBvcHRzLmFkZFF1ZXJ5UHJlZml4IDogZGVmYXVsdHMuYWRkUXVlcnlQcmVmaXgsXG4gICAgICAgIGFsbG93RG90czogdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHMsXG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzLmNoYXJzZXRTZW50aW5lbCxcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuZGVsaW1pdGVyIDogb3B0cy5kZWxpbWl0ZXIsXG4gICAgICAgIGVuY29kZTogdHlwZW9mIG9wdHMuZW5jb2RlID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZSA6IGRlZmF1bHRzLmVuY29kZSxcbiAgICAgICAgZW5jb2RlcjogdHlwZW9mIG9wdHMuZW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZW5jb2RlciA6IGRlZmF1bHRzLmVuY29kZXIsXG4gICAgICAgIGVuY29kZVZhbHVlc09ubHk6IHR5cGVvZiBvcHRzLmVuY29kZVZhbHVlc09ubHkgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlVmFsdWVzT25seSA6IGRlZmF1bHRzLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlcixcbiAgICAgICAgc2VyaWFsaXplRGF0ZTogdHlwZW9mIG9wdHMuc2VyaWFsaXplRGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc2VyaWFsaXplRGF0ZSA6IGRlZmF1bHRzLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgIHNraXBOdWxsczogdHlwZW9mIG9wdHMuc2tpcE51bGxzID09PSAnYm9vbGVhbicgPyBvcHRzLnNraXBOdWxscyA6IGRlZmF1bHRzLnNraXBOdWxscyxcbiAgICAgICAgc29ydDogdHlwZW9mIG9wdHMuc29ydCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc29ydCA6IG51bGwsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZ1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG9wdHMpIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyhvcHRzKTtcblxuICAgIHZhciBvYmpLZXlzO1xuICAgIHZhciBmaWx0ZXI7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmogPSBmaWx0ZXIoJycsIG9iaik7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIGFycmF5Rm9ybWF0O1xuICAgIGlmIChvcHRzICYmIG9wdHMuYXJyYXlGb3JtYXQgaW4gYXJyYXlQcmVmaXhHZW5lcmF0b3JzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5hcnJheUZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKG9wdHMgJiYgJ2luZGljZXMnIGluIG9wdHMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRzLmluZGljZXMgPyAnaW5kaWNlcycgOiAncmVwZWF0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheUZvcm1hdCA9ICdpbmRpY2VzJztcbiAgICB9XG5cbiAgICB2YXIgZ2VuZXJhdGVBcnJheVByZWZpeCA9IGFycmF5UHJlZml4R2VuZXJhdG9yc1thcnJheUZvcm1hdF07XG5cbiAgICBpZiAoIW9iaktleXMpIHtcbiAgICAgICAgb2JqS2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc29ydCkge1xuICAgICAgICBvYmpLZXlzLnNvcnQob3B0aW9ucy5zb3J0KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVG9BcnJheShrZXlzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2tpcE51bGxzLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGUgPyBvcHRpb25zLmVuY29kZXIgOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLnNvcnQsXG4gICAgICAgICAgICBvcHRpb25zLmFsbG93RG90cyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgIG9wdGlvbnMuZm9ybWF0dGVyLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgb3B0aW9ucy5jaGFyc2V0XG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHZhciBqb2luZWQgPSBrZXlzLmpvaW4ob3B0aW9ucy5kZWxpbWl0ZXIpO1xuICAgIHZhciBwcmVmaXggPSBvcHRpb25zLmFkZFF1ZXJ5UHJlZml4ID09PSB0cnVlID8gJz8nIDogJyc7XG5cbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JyksIHRoZSBcIm51bWVyaWMgZW50aXR5XCIgcmVwcmVzZW50YXRpb24gb2YgYSBjaGVja21hcmtcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lMjYlMjMxMDAwMyUzQiYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCfinJMnKVxuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSVFMiU5QyU5MyYnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGpvaW5lZC5sZW5ndGggPiAwID8gcHJlZml4ICsgam9pbmVkIDogJyc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBhbGxvd1Byb3RvdHlwZXM6IGZhbHNlLFxuICAgIGFycmF5TGltaXQ6IDIwLFxuICAgIGNoYXJzZXQ6ICd1dGYtOCcsXG4gICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSxcbiAgICBjb21tYTogZmFsc2UsXG4gICAgZGVjb2RlcjogdXRpbHMuZGVjb2RlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGRlcHRoOiA1LFxuICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IGZhbHNlLFxuICAgIHBhcmFtZXRlckxpbWl0OiAxMDAwLFxuICAgIHBhcnNlQXJyYXlzOiB0cnVlLFxuICAgIHBsYWluT2JqZWN0czogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGludGVycHJldE51bWVyaWNFbnRpdGllcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyYjKFxcZCspOy9nLCBmdW5jdGlvbiAoJDAsIG51bWJlclN0cikge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChudW1iZXJTdHIsIDEwKSk7XG4gICAgfSk7XG59O1xuXG52YXIgcGFyc2VBcnJheVZhbHVlID0gZnVuY3Rpb24gKHZhbCwgb3B0aW9ucykge1xuICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5jb21tYSAmJiB2YWwuaW5kZXhPZignLCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5zcGxpdCgnLCcpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG59O1xuXG4vLyBUaGlzIGlzIHdoYXQgYnJvd3NlcnMgd2lsbCBzdWJtaXQgd2hlbiB0aGUg4pyTIGNoYXJhY3RlciBvY2N1cnMgaW4gYW5cbi8vIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCBib2R5IGFuZCB0aGUgZW5jb2Rpbmcgb2YgdGhlIHBhZ2UgY29udGFpbmluZ1xuLy8gdGhlIGZvcm0gaXMgaXNvLTg4NTktMSwgb3Igd2hlbiB0aGUgc3VibWl0dGVkIGZvcm0gaGFzIGFuIGFjY2VwdC1jaGFyc2V0XG4vLyBhdHRyaWJ1dGUgb2YgaXNvLTg4NTktMS4gUHJlc3VtYWJseSBhbHNvIHdpdGggb3RoZXIgY2hhcnNldHMgdGhhdCBkbyBub3QgY29udGFpblxuLy8gdGhlIOKckyBjaGFyYWN0ZXIsIHN1Y2ggYXMgdXMtYXNjaWkuXG52YXIgaXNvU2VudGluZWwgPSAndXRmOD0lMjYlMjMxMDAwMyUzQic7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKVxuXG4vLyBUaGVzZSBhcmUgdGhlIHBlcmNlbnQtZW5jb2RlZCB1dGYtOCBvY3RldHMgcmVwcmVzZW50aW5nIGEgY2hlY2ttYXJrLCBpbmRpY2F0aW5nIHRoYXQgdGhlIHJlcXVlc3QgYWN0dWFsbHkgaXMgdXRmLTggZW5jb2RlZC5cbnZhciBjaGFyc2V0U2VudGluZWwgPSAndXRmOD0lRTIlOUMlOTMnOyAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG5cbnZhciBwYXJzZVZhbHVlcyA9IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmdWYWx1ZXMoc3RyLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIHZhciBjbGVhblN0ciA9IG9wdGlvbnMuaWdub3JlUXVlcnlQcmVmaXggPyBzdHIucmVwbGFjZSgvXlxcPy8sICcnKSA6IHN0cjtcbiAgICB2YXIgbGltaXQgPSBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID09PSBJbmZpbml0eSA/IHVuZGVmaW5lZCA6IG9wdGlvbnMucGFyYW1ldGVyTGltaXQ7XG4gICAgdmFyIHBhcnRzID0gY2xlYW5TdHIuc3BsaXQob3B0aW9ucy5kZWxpbWl0ZXIsIGxpbWl0KTtcbiAgICB2YXIgc2tpcEluZGV4ID0gLTE7IC8vIEtlZXAgdHJhY2sgb2Ygd2hlcmUgdGhlIHV0Zjggc2VudGluZWwgd2FzIGZvdW5kXG4gICAgdmFyIGk7XG5cbiAgICB2YXIgY2hhcnNldCA9IG9wdGlvbnMuY2hhcnNldDtcbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAocGFydHNbaV0uaW5kZXhPZigndXRmOD0nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAndXRmLTgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydHNbaV0gPT09IGlzb1NlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAnaXNvLTg4NTktMSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNraXBJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaSA9IHBhcnRzLmxlbmd0aDsgLy8gVGhlIGVzbGludCBzZXR0aW5ncyBkbyBub3QgYWxsb3cgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGkgPT09IHNraXBJbmRleCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcblxuICAgICAgICB2YXIgYnJhY2tldEVxdWFsc1BvcyA9IHBhcnQuaW5kZXhPZignXT0nKTtcbiAgICAgICAgdmFyIHBvcyA9IGJyYWNrZXRFcXVhbHNQb3MgPT09IC0xID8gcGFydC5pbmRleE9mKCc9JykgOiBicmFja2V0RXF1YWxzUG9zICsgMTtcblxuICAgICAgICB2YXIga2V5LCB2YWw7XG4gICAgICAgIGlmIChwb3MgPT09IC0xKSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydCwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ2tleScpO1xuICAgICAgICAgICAgdmFsID0gb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPyBudWxsIDogJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZSgwLCBwb3MpLCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAna2V5Jyk7XG4gICAgICAgICAgICB2YWwgPSB1dGlscy5tYXliZU1hcChcbiAgICAgICAgICAgICAgICBwYXJzZUFycmF5VmFsdWUocGFydC5zbGljZShwb3MgKyAxKSwgb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVuY29kZWRWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGVjb2RlcihlbmNvZGVkVmFsLCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAndmFsdWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCAmJiBvcHRpb25zLmludGVycHJldE51bWVyaWNFbnRpdGllcyAmJiBjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIHZhbCA9IGludGVycHJldE51bWVyaWNFbnRpdGllcyh2YWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnQuaW5kZXhPZignW109JykgPiAtMSkge1xuICAgICAgICAgICAgdmFsID0gaXNBcnJheSh2YWwpID8gW3ZhbF0gOiB2YWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHV0aWxzLmNvbWJpbmUob2JqW2tleV0sIHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgcGFyc2VPYmplY3QgPSBmdW5jdGlvbiAoY2hhaW4sIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKSB7XG4gICAgdmFyIGxlYWYgPSB2YWx1ZXNQYXJzZWQgPyB2YWwgOiBwYXJzZUFycmF5VmFsdWUodmFsLCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIGkgPSBjaGFpbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgb2JqO1xuICAgICAgICB2YXIgcm9vdCA9IGNoYWluW2ldO1xuXG4gICAgICAgIGlmIChyb290ID09PSAnW10nICYmIG9wdGlvbnMucGFyc2VBcnJheXMpIHtcbiAgICAgICAgICAgIG9iaiA9IFtdLmNvbmNhdChsZWFmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iaiA9IG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgICAgICAgdmFyIGNsZWFuUm9vdCA9IHJvb3QuY2hhckF0KDApID09PSAnWycgJiYgcm9vdC5jaGFyQXQocm9vdC5sZW5ndGggLSAxKSA9PT0gJ10nID8gcm9vdC5zbGljZSgxLCAtMSkgOiByb290O1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoY2xlYW5Sb290LCAxMCk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMucGFyc2VBcnJheXMgJiYgY2xlYW5Sb290ID09PSAnJykge1xuICAgICAgICAgICAgICAgIG9iaiA9IHsgMDogbGVhZiB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAhaXNOYU4oaW5kZXgpXG4gICAgICAgICAgICAgICAgJiYgcm9vdCAhPT0gY2xlYW5Sb290XG4gICAgICAgICAgICAgICAgJiYgU3RyaW5nKGluZGV4KSA9PT0gY2xlYW5Sb290XG4gICAgICAgICAgICAgICAgJiYgaW5kZXggPj0gMFxuICAgICAgICAgICAgICAgICYmIChvcHRpb25zLnBhcnNlQXJyYXlzICYmIGluZGV4IDw9IG9wdGlvbnMuYXJyYXlMaW1pdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG9iaiA9IFtdO1xuICAgICAgICAgICAgICAgIG9ialtpbmRleF0gPSBsZWFmO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmpbY2xlYW5Sb290XSA9IGxlYWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZWFmID0gb2JqOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgfVxuXG4gICAgcmV0dXJuIGxlYWY7XG59O1xuXG52YXIgcGFyc2VLZXlzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ0tleXMoZ2l2ZW5LZXksIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKSB7XG4gICAgaWYgKCFnaXZlbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuYWxsb3dEb3RzID8gZ2l2ZW5LZXkucmVwbGFjZSgvXFwuKFteLltdKykvZywgJ1skMV0nKSA6IGdpdmVuS2V5O1xuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIGJyYWNrZXRzID0gLyhcXFtbXltcXF1dKl0pLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teW1xcXV0qXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IG9wdGlvbnMuZGVwdGggPiAwICYmIGJyYWNrZXRzLmV4ZWMoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gc2VnbWVudCA/IGtleS5zbGljZSgwLCBzZWdtZW50LmluZGV4KSA6IGtleTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlbid0IHVzaW5nIHBsYWluIG9iamVjdHMsIG9wdGlvbmFsbHkgcHJlZml4IGtleXMgdGhhdCB3b3VsZCBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgcGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChvcHRpb25zLmRlcHRoID4gMCAmJiAoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNlZ21lbnRbMV0uc2xpY2UoMSwgLTEpKSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwganVzdCBhZGQgd2hhdGV2ZXIgaXMgbGVmdFxuXG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlT2JqZWN0KGtleXMsIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKTtcbn07XG5cbnZhciBub3JtYWxpemVQYXJzZU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVQYXJzZU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZGVjb2RlciAhPT0gbnVsbCAmJiBvcHRzLmRlY29kZXIgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0cy5kZWNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RlY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmNoYXJzZXQgIT09ICd1bmRlZmluZWQnICYmIG9wdHMuY2hhcnNldCAhPT0gJ3V0Zi04JyAmJiBvcHRzLmNoYXJzZXQgIT09ICdpc28tODg1OS0xJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICB2YXIgY2hhcnNldCA9IHR5cGVvZiBvcHRzLmNoYXJzZXQgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuY2hhcnNldCA6IG9wdHMuY2hhcnNldDtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGFsbG93RG90czogdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHMsXG4gICAgICAgIGFsbG93UHJvdG90eXBlczogdHlwZW9mIG9wdHMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzLmFsbG93UHJvdG90eXBlcyxcbiAgICAgICAgYXJyYXlMaW1pdDogdHlwZW9mIG9wdHMuYXJyYXlMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLmFycmF5TGltaXQgOiBkZWZhdWx0cy5hcnJheUxpbWl0LFxuICAgICAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgICAgICBjaGFyc2V0U2VudGluZWw6IHR5cGVvZiBvcHRzLmNoYXJzZXRTZW50aW5lbCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jaGFyc2V0U2VudGluZWwgOiBkZWZhdWx0cy5jaGFyc2V0U2VudGluZWwsXG4gICAgICAgIGNvbW1hOiB0eXBlb2Ygb3B0cy5jb21tYSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jb21tYSA6IGRlZmF1bHRzLmNvbW1hLFxuICAgICAgICBkZWNvZGVyOiB0eXBlb2Ygb3B0cy5kZWNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5kZWNvZGVyIDogZGVmYXVsdHMuZGVjb2RlcixcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICdzdHJpbmcnIHx8IHV0aWxzLmlzUmVnRXhwKG9wdHMuZGVsaW1pdGVyKSA/IG9wdHMuZGVsaW1pdGVyIDogZGVmYXVsdHMuZGVsaW1pdGVyLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtY29lcmNpb24sIG5vLWV4dHJhLXBhcmVuc1xuICAgICAgICBkZXB0aDogKHR5cGVvZiBvcHRzLmRlcHRoID09PSAnbnVtYmVyJyB8fCBvcHRzLmRlcHRoID09PSBmYWxzZSkgPyArb3B0cy5kZXB0aCA6IGRlZmF1bHRzLmRlcHRoLFxuICAgICAgICBpZ25vcmVRdWVyeVByZWZpeDogb3B0cy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZSxcbiAgICAgICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiB0eXBlb2Ygb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgPT09ICdib29sZWFuJyA/IG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIDogZGVmYXVsdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzLFxuICAgICAgICBwYXJhbWV0ZXJMaW1pdDogdHlwZW9mIG9wdHMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0cy5wYXJhbWV0ZXJMaW1pdCA6IGRlZmF1bHRzLnBhcmFtZXRlckxpbWl0LFxuICAgICAgICBwYXJzZUFycmF5czogb3B0cy5wYXJzZUFycmF5cyAhPT0gZmFsc2UsXG4gICAgICAgIHBsYWluT2JqZWN0czogdHlwZW9mIG9wdHMucGxhaW5PYmplY3RzID09PSAnYm9vbGVhbicgPyBvcHRzLnBsYWluT2JqZWN0cyA6IGRlZmF1bHRzLnBsYWluT2JqZWN0cyxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSBudWxsIHx8IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gcGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IHBhcnNlS2V5cyhrZXksIHRlbXBPYmpba2V5XSwgb3B0aW9ucywgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpO1xuICAgICAgICBvYmogPSB1dGlscy5tZXJnZShvYmosIG5ld09iaiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHV0aWxzLmNvbXBhY3Qob2JqKTtcbn07XG4iLCJleHBvcnQgdHlwZSBDb250ZW50VHlwZU5hbWUgPSBcInN0cmluZ1wiIHwgXCJ0ZXh0XCIgfCBcImludGVnZXJcIiB8IFwibWVkaWFcIiB8IFwiY29tcG9uZW50XCIgfCBcImJvb2xlYW5cIiB8IFwiZW51bWVyYXRpb25cIiB8IFwibGFiZWxcIlxuXG5leHBvcnQgZW51bSBBVFRJQlVURV9UWVBFUyB7XG4gIFNUUklORyA9IFwic3RyaW5nXCIsXG4gIFRFWFQgPSBcInRleHRcIixcbiAgSU5UID0gXCJpbnRlZ2VyXCIsXG4gIE1FRElBID0gXCJtZWRpYVwiLFxuICBDT01QT05FTlQgPSBcImNvbXBvbmVudFwiLFxuICBFTlVNRVJBVElPTiA9IFwiZW51bWVyYXRpb25cIixcbiAgTEFCRUwgPSBcImxhYmVsXCJcbn1cblxuZXhwb3J0IGVudW0gV0hJVEVMSVNUX0tFWVMge1xuICBDT01QT05FTlQgPSBcIl9fY29tcG9uZW50XCIsXG4gIExBQkVMID0gXCJfX2xhYmVsXCIsXG4gIElEID0gXCJfX2lkXCIsXG4gIENPTlRFTlQgPSBcImNvbnRlbnRcIlxufVxuXG5leHBvcnQgY29uc3QgQXR0cmlidXRlVHlwZXNXaGl0ZWxpc3Q6IHN0cmluZ1tdID0gW1xuICBcInN0cmluZ1wiLFxuICBcInRleHRcIixcbiAgXCJpbnRlZ2VyXCIsXG4gIFwibWVkaWFcIixcbiAgXCJjb21wb25lbnRcIixcbiAgXCJib29sZWFuXCIsXG4gIFwiZW51bWVyYXRpb25cIixcbiAgXCJsYWJlbFwiLFxuXTtcblxuZXhwb3J0IGNvbnN0IEF0dHJpYnV0ZVR5cGVzQmxhY2tsaXN0OiBzdHJpbmdbXSA9IFtcbiAgXCJpZFwiLFxuICBcInVzZXJzXCIsXG5dO1xuXG5leHBvcnQgY29uc3QgV2hpdGVsaXN0S2V5czogc3RyaW5nW10gPSBbXG4gIFwiX19jb21wb25lbnRcIixcbiAgXCJfX2xhYmVsXCIsXG4gIFwiX19pZFwiLFxuICBcImNvbnRlbnRcIlxuXTsiLCJpbXBvcnQge1xuICBBdHRyaWJ1dGVUeXBlc1doaXRlbGlzdCxcbiAgQVRUSUJVVEVfVFlQRVMsXG4gIEF0dHJpYnV0ZVR5cGVzQmxhY2tsaXN0LFxuICBXaGl0ZWxpc3RLZXlzXG59IGZyb20gXCIuL3R5cGVzL2NvbnRlbnQtYXR0cmlidXRlLXR5cGVzXCI7XG5cbmltcG9ydCB7XG4gIEVudHJ5LFxuICBDb250ZW50VHlwZUJhc2UsXG4gIENvbnRlbnRUeXBlUmVzcG9uc2UsXG4gIEF0dHJpYnV0ZSxcbiAgRmllbGRzXG59IGZyb20gXCIuL2ludGVyZmFjZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RyYXBpRm9ybSB7XG4gIHByaXZhdGUgdXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgYWNjZXB0ZWRUeXBlczogc3RyaW5nW10gPSBBdHRyaWJ1dGVUeXBlc1doaXRlbGlzdDtcbiAgcHJpdmF0ZSBibGFja2xpc3RlZFByb3BzID0gQXR0cmlidXRlVHlwZXNCbGFja2xpc3Q7XG4gIHByaXZhdGUgd2hpdGVsaXN0S2V5cyA9IFdoaXRlbGlzdEtleXM7XG4gIHByaXZhdGUgY29udGVudFR5cGU6IENvbnRlbnRUeXBlQmFzZTtcbiAgcHJpdmF0ZSBjb250ZW50VHlwZVVJRDogc3RyaW5nXG4gIHB1YmxpYyBmaWVsZHM6IEZpZWxkcztcbiAgcHVibGljIHJlcXVlc3Q6IEZpZWxkcztcbiAgcHVibGljIGV4aXN0aW5nTW9kZWw6IGFueTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBiYXNlVVJMOiBzdHJpbmcsXG4gICAgY29udGVudFR5cGVVSUQ6IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLmNvbnRlbnRUeXBlVUlEID0gY29udGVudFR5cGVVSUQ7XG4gICAgdGhpcy51cmwgPSBgJHtiYXNlVVJMfS9jb250ZW50LW1hbmFnZXIvY29udGVudC10eXBlc2A7XG4gIH1cblxuICBhc3luYyBnZXRDb250ZW50VHlwZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHt0aGlzLnVybH0vJHt0aGlzLmNvbnRlbnRUeXBlVUlEfWApO1xuICAgIGNvbnN0IGpzb246IENvbnRlbnRUeXBlUmVzcG9uc2UgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIGlmIChqc29uLnN0YXR1c0NvZGUpXG4gICAgdGhpcy5jb250ZW50VHlwZSA9IGpzb24uZGF0YTtcbiAgfVxuXG4gIHNldFJlcXVlc3RTdGF0ZShrZXk6IHN0cmluZywgY29tcG9uZW50SWQ6IHN0cmluZywgdmFsdWU6IGFueSk6IEZpZWxkcyB7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy5yZXF1ZXN0LmNvbnRlbnQpIHtcbiAgICAgICAgaWYgKGNvbXBvbmVudC5fX2NvbXBvbmVudCA9PT0gY29tcG9uZW50SWQpIHtcbiAgICAgICAgICBjb21wb25lbnRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5yZXF1ZXN0W2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcy5maWVsZHM7XG4gIH1cblxuICB1cGRhdGVTY2hlbWEoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIHBhcmVudDogc3RyaW5nKSB7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgdGhpcy5maWVsZHNbcGFyZW50XVtrZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmllbGRzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBpc0J1aWxkYWJsZShmaWVsZDogQXR0cmlidXRlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZpZWxkICYmIGZpZWxkLnR5cGUgJiYgdGhpcy5hY2NlcHRlZFR5cGVzLmluY2x1ZGVzKGZpZWxkLnR5cGUpO1xuICB9XG5cbiAgaXNDb21wb25lbnQoZmllbGQ6IEF0dHJpYnV0ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmaWVsZC50eXBlID09PSBBVFRJQlVURV9UWVBFUy5DT01QT05FTlQ7XG4gIH1cblxuICBpc1ZhbGlkVHlwZShrZXk6IHN0cmluZywgYXR0cmlidXRlOiBBdHRyaWJ1dGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgYXR0cmlidXRlICYmXG4gICAgICB0aGlzLmlzQnVpbGRhYmxlKGF0dHJpYnV0ZSkgJiZcbiAgICAgICF0aGlzLmlzQ29tcG9uZW50KGF0dHJpYnV0ZSkgJiZcbiAgICAgIHRoaXMuYWNjZXB0ZWRUeXBlcy5pbmNsdWRlcyhhdHRyaWJ1dGUudHlwZSkgIT09IGZhbHNlICYmXG4gICAgICAhdGhpcy5ibGFja2xpc3RlZFByb3BzLmluY2x1ZGVzKGtleSlcbiAgICApO1xuICB9XG5cbiAgaXNTaW1wbGVUeXBlKGtleTogc3RyaW5nLCBhdHRyaWJ1dGU6IEF0dHJpYnV0ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoIXRoaXMuaXNDb21wb25lbnQoYXR0cmlidXRlKSAmJlxuICAgICAgdGhpcy5pc1ZhbGlkVHlwZShrZXksIGF0dHJpYnV0ZSkpIHx8XG4gICAgICB0aGlzLndoaXRlbGlzdEtleXMuaW5jbHVkZXMoa2V5KTtcbiAgfVxuXG4gIGJ1aWxkU2ltcGxlVHlwZShrZXk6IHN0cmluZywgYXR0cmlidXRlOiBBdHRyaWJ1dGUsIGNvbXBvbmVudEtleT86IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU2ltcGxlVHlwZShrZXksIGF0dHJpYnV0ZSkpIHtcbiAgICAgIHRoaXMuZmllbGRzW2tleV0gPSBhdHRyaWJ1dGU7XG4gICAgICB0aGlzLmZpZWxkc1trZXldLl9fbGFiZWwgPSBrZXk7XG4gICAgICB0aGlzLmZpZWxkc1trZXldLnZhbHVlID0gY29tcG9uZW50S2V5XG4gICAgICAgID8gdGhpcy5leGlzdGluZ01vZGVsW2NvbXBvbmVudEtleV1ba2V5XVxuICAgICAgICA6IHRoaXMuZXhpc3RpbmdNb2RlbFtrZXldO1xuICAgIH1cbiAgfVxuXG4gIGJ1aWxkQ29tcGxleFR5cGUoa2V5OiBzdHJpbmcsIGF0dHJpYnV0ZTogQXR0cmlidXRlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNDb21wb25lbnQoYXR0cmlidXRlKSkge1xuICAgICAgY29uc3QgY29tcG9uZW50QXR0cnM6IEF0dHJpYnV0ZSA9IHRoaXMuY29udGVudFR5cGUuY29tcG9uZW50c1thdHRyaWJ1dGUuY29tcG9uZW50XS5zY2hlbWEuYXR0cmlidXRlcztcbiAgICAgIGNvbXBvbmVudEF0dHJzLl9fY29tcG9uZW50ID0gYXR0cmlidXRlLmNvbXBvbmVudDtcbiAgICAgIGNvbXBvbmVudEF0dHJzLl9fbGFiZWwgPSBrZXk7XG4gICAgICB0aGlzLmZpZWxkcy5jb250ZW50LnB1c2goY29tcG9uZW50QXR0cnMpO1xuICAgICAgdGhpcy5nYXRoZXJTY2hlbWEoY29tcG9uZW50QXR0cnMsIGtleSk7XG4gICAgfVxuICB9XG5cbiAgZ2F0aGVyU2NoZW1hKHBhcmVudD86IGFueSwgY29tcG9uZW50S2V5Pzogc3RyaW5nKTogdm9pZCB7XG4gICAgcGFyZW50ID0gcGFyZW50IHx8IHRoaXMuY29udGVudFR5cGUuY29udGVudFR5cGUuc2NoZW1hLmF0dHJpYnV0ZXM7XG5cbiAgICBPYmplY3Qua2V5cyhwYXJlbnQpLm1hcCgoa2V5KSA9PiB7XG4gICAgICBpZiAodGhpcy5pc1NpbXBsZVR5cGUoa2V5LCBwYXJlbnRba2V5XSkpIHtcbiAgICAgICAgdGhpcy5idWlsZFNpbXBsZVR5cGUoa2V5LCBwYXJlbnRba2V5XSwgY29tcG9uZW50S2V5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNDb21wb25lbnQocGFyZW50W2tleV0pKSB7XG4gICAgICAgIHRoaXMuYnVpbGRDb21wbGV4VHlwZShrZXksIHBhcmVudFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldFNjaGVtYShleGlzdGluZ0VudHJ5OiBFbnRyeSk6IFByb21pc2U8RmllbGRzPiB7XG4gICAgdGhpcy5leGlzdGluZ01vZGVsID0gZXhpc3RpbmdFbnRyeTtcbiAgICBhd2FpdCB0aGlzLmdldENvbnRlbnRUeXBlKCk7XG4gICAgdGhpcy5nYXRoZXJTY2hlbWEoKTtcbiAgICByZXR1cm4gdGhpcy5maWVsZHM7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIEVudHJ5LFxuICBGaWVsZHMsXG4gIEZvcm1BY3Rpb25hYmxlLFxufSBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XG5cblxuZXhwb3J0IGNsYXNzIFN0cmFwaUZvcm1NZXRob2RzRGVjb3JhdG9yIHtcbiAgcHJpdmF0ZSBhcGlJRDogc3RyaW5nO1xuICBwcml2YXRlIHN0cmFwaVNESzogRm9ybUFjdGlvbmFibGU7XG4gIHByaXZhdGUgZXhpc3RpbmdNb2RlbDogRW50cnk7XG5cbiAgY29uc3RydWN0b3IoY29udGVudFR5cGVVSUQ6IHN0cmluZywgc3RyYXBpU0RLOiBGb3JtQWN0aW9uYWJsZSkge1xuICAgIHRoaXMuc3RyYXBpU0RLID0gc3RyYXBpU0RLO1xuICAgIHRoaXMuYXBpSUQgPSB0aGlzLmdldEFwaUlEKGNvbnRlbnRUeXBlVUlEKTtcbiAgfVxuXG4gIGdldEFwaUlEKGNvbnRlbnRUeXBlVUlEOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChjb250ZW50VHlwZVVJRC5pbmRleE9mKFwiOjpcIikgPT09IDAgfHwgY29udGVudFR5cGVVSUQuaW5kZXhPZihcIi5cIikgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXG4gICAgICAgIFN0cmFwaSBGb3JtIEJ1aWxkZXIgcmVxdWlyZXMgYSBnbG9iYWxcbiAgICAgICAgY29udGVudCB0eXBlIGlkIGkuZS4gYXBwbGljYXRpb246OmNvbnRlbnRUeXBlVUlELmNvbnRlbnRUeXBlVUlEXG4gICAgICBgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGVudFR5cGVVSUQuc2xpY2UoXG4gICAgICBjb250ZW50VHlwZVVJRC5pbmRleE9mKFwiOjpcIikgKyAyLFxuICAgICAgY29udGVudFR5cGVVSUQuaW5kZXhPZihcIi5cIilcbiAgICApO1xuICB9XG5cbiAgZ2V0IHN0cmFwaSgpOiBGb3JtQWN0aW9uYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyYXBpU0RLO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlKGRhdGE6IEZpZWxkcyk6IFByb21pc2U8RW50cnk+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zdHJhcGlTREsuY3JlYXRlRW50cnkodGhpcy5hcGlJRCwgZGF0YSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGUoZGF0YTogRmllbGRzLCBpZCA/OiBzdHJpbmcgfCBudW1iZXIpOiBQcm9taXNlPEVudHJ5PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc3RyYXBpU0RLLnVwZGF0ZUVudHJ5KHRoaXMuYXBpSUQsIGlkIHx8IHRoaXMuZXhpc3RpbmdNb2RlbC5pZCwgZGF0YSk7XG4gIH1cblxuICBhc3luYyBzZWFyY2gocGFyYW1zOiBvYmplY3QpOiBQcm9taXNlPEVudHJ5W10+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zdHJhcGlTREsuZ2V0RW50cmllcyh0aGlzLmFwaUlELCBwYXJhbXMpO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlKGlkOiBzdHJpbmd8bnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5zdHJhcGlTREsuZGVsZXRlRW50cnkodGhpcy5hcGlJRCwgaWQpO1xuICB9XG59IiwiaW1wb3J0IFN0cmFwaVNES1Byb3ZpZGVyIGZyb20gXCJAdGhldGFwcm9vbS9zdHJhcGktc2RrLWphdmFzY3JpcHRcIjtcbmltcG9ydCBTdHJhcGlGb3JtQnVpbGRlciBmcm9tIFwiLi9mb3JtLmJ1aWxkZXJcIjtcbmltcG9ydCB7IFN0cmFwaUZvcm1NZXRob2RzRGVjb3JhdG9yIH0gZnJvbSBcIi4vZm9ybS5hY3Rpb25zXCI7XG5pbXBvcnQgeyBGb3JtQWN0aW9uYWJsZSB9IGZyb20gXCIuL2ludGVyZmFjZXNcIjtcblxuaW50ZXJmYWNlIEF1dGhlbnRpY2F0aW9uIHtcbiAgaWRlbnRpZmllcjogc3RyaW5nLFxuICBwYXNzd29yZDogc3RyaW5nLFxufVxuXG5leHBvcnQgY2xhc3MgRmFjdG9yeSB7XG4gIHByaXZhdGUgYmFzZVVSTDogc3RyaW5nO1xuICBwdWJsaWMgc2RrOiBGb3JtQWN0aW9uYWJsZTtcblxuICBjb25zdHJ1Y3RvcihiYXNlVVJMOiBzdHJpbmcsIGF1dGg6IEF1dGhlbnRpY2F0aW9uKSB7XG4gICAgaWYgKCFhdXRoKSB0aHJvdyBuZXcgRXJyb3IoXCJTdHJhcGkgRm9ybSBCdWlsZGVyIG5lZWRzIGF1dGggdG8gYXR0YWNoIHJlc291cmNlcyBhbmQgcmVsYXRpb25zaGlwcy5cIik7XG4gICAgdGhpcy5iYXNlVVJMID0gYmFzZVVSTDtcbiAgICB0aGlzLnNkayA9IFN0cmFwaVNES1Byb3ZpZGVyKGJhc2VVUkwsIHsgZG9tYWluOiBhdXRoLmlkZW50aWZpZXIsIHRva2VuOiBhdXRoLnBhc3N3b3JkIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0Rm9ybShjb250ZW50VHlwZVVJRDogc3RyaW5nLCBleGlzdGluZ0VudHJ5OiBhbnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmllbGRzOiBhd2FpdCBuZXcgU3RyYXBpRm9ybUJ1aWxkZXIodGhpcy5iYXNlVVJMLCBjb250ZW50VHlwZVVJRCkuZ2V0U2NoZW1hKGV4aXN0aW5nRW50cnkpLFxuICAgICAgYWN0aW9uczogbmV3IFN0cmFwaUZvcm1NZXRob2RzRGVjb3JhdG9yKGNvbnRlbnRUeXBlVUlELCB0aGlzLnNkaylcbiAgICB9XG4gIH1cblxuICBnZXRGb3JtQnVpbGRlcihjb250ZW50VHlwZVVJRDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJhcGlGb3JtQnVpbGRlcih0aGlzLmJhc2VVUkwsIGNvbnRlbnRUeXBlVUlEKVxuICB9XG5cbiAgZ2V0QWN0aW9ucyhjb250ZW50VHlwZVVJRDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJhcGlGb3JtTWV0aG9kc0RlY29yYXRvcihjb250ZW50VHlwZVVJRCwgdGhpcy5zZGspXG4gIH1cblxuICBnZXRTdHJhcGlBUEkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2RrO1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==